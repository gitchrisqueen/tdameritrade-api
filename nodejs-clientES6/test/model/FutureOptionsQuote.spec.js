/**
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FutureOptionsQuote', function() {
    it('should create an instance of FutureOptionsQuote', function() {
      // uncomment below and update the code to test FutureOptionsQuote
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be.a(GitChrisQueen_TDA_JS.FutureOptionsQuote);
    });

    it('should have the property symbol (base name: "symbol")', function() {
      // uncomment below and update the code to test the property symbol
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property bidPriceInDouble (base name: "bidPriceInDouble")', function() {
      // uncomment below and update the code to test the property bidPriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property askPriceInDouble (base name: "askPriceInDouble")', function() {
      // uncomment below and update the code to test the property askPriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property lastPriceInDouble (base name: "lastPriceInDouble")', function() {
      // uncomment below and update the code to test the property lastPriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property highPriceInDouble (base name: "highPriceInDouble")', function() {
      // uncomment below and update the code to test the property highPriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property lowPriceInDouble (base name: "lowPriceInDouble")', function() {
      // uncomment below and update the code to test the property lowPriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property closePriceInDouble (base name: "closePriceInDouble")', function() {
      // uncomment below and update the code to test the property closePriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property openPriceInDouble (base name: "openPriceInDouble")', function() {
      // uncomment below and update the code to test the property openPriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property netChangeInDouble (base name: "netChangeInDouble")', function() {
      // uncomment below and update the code to test the property netChangeInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property openInterest (base name: "openInterest")', function() {
      // uncomment below and update the code to test the property openInterest
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property exchangeName (base name: "exchangeName")', function() {
      // uncomment below and update the code to test the property exchangeName
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property securityStatus (base name: "securityStatus")', function() {
      // uncomment below and update the code to test the property securityStatus
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property volatility (base name: "volatility")', function() {
      // uncomment below and update the code to test the property volatility
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property moneyIntrinsicValueInDouble (base name: "moneyIntrinsicValueInDouble")', function() {
      // uncomment below and update the code to test the property moneyIntrinsicValueInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property multiplierInDouble (base name: "multiplierInDouble")', function() {
      // uncomment below and update the code to test the property multiplierInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property digits (base name: "digits")', function() {
      // uncomment below and update the code to test the property digits
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property strikePriceInDouble (base name: "strikePriceInDouble")', function() {
      // uncomment below and update the code to test the property strikePriceInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property contractType (base name: "contractType")', function() {
      // uncomment below and update the code to test the property contractType
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property underlying (base name: "underlying")', function() {
      // uncomment below and update the code to test the property underlying
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property timeValueInDouble (base name: "timeValueInDouble")', function() {
      // uncomment below and update the code to test the property timeValueInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property deltaInDouble (base name: "deltaInDouble")', function() {
      // uncomment below and update the code to test the property deltaInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property gammaInDouble (base name: "gammaInDouble")', function() {
      // uncomment below and update the code to test the property gammaInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property thetaInDouble (base name: "thetaInDouble")', function() {
      // uncomment below and update the code to test the property thetaInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property vegaInDouble (base name: "vegaInDouble")', function() {
      // uncomment below and update the code to test the property vegaInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property rhoInDouble (base name: "rhoInDouble")', function() {
      // uncomment below and update the code to test the property rhoInDouble
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property mark (base name: "mark")', function() {
      // uncomment below and update the code to test the property mark
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property tick (base name: "tick")', function() {
      // uncomment below and update the code to test the property tick
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property tickAmount (base name: "tickAmount")', function() {
      // uncomment below and update the code to test the property tickAmount
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property futureIsTradable (base name: "futureIsTradable")', function() {
      // uncomment below and update the code to test the property futureIsTradable
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property futureTradingHours (base name: "futureTradingHours")', function() {
      // uncomment below and update the code to test the property futureTradingHours
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property futurePercentChange (base name: "futurePercentChange")', function() {
      // uncomment below and update the code to test the property futurePercentChange
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property futureIsActive (base name: "futureIsActive")', function() {
      // uncomment below and update the code to test the property futureIsActive
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property futureExpirationDate (base name: "futureExpirationDate")', function() {
      // uncomment below and update the code to test the property futureExpirationDate
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property expirationType (base name: "expirationType")', function() {
      // uncomment below and update the code to test the property expirationType
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property exerciseType (base name: "exerciseType")', function() {
      // uncomment below and update the code to test the property exerciseType
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

    it('should have the property inTheMoney (base name: "inTheMoney")', function() {
      // uncomment below and update the code to test the property inTheMoney
      //var instane = new GitChrisQueen_TDA_JS.FutureOptionsQuote();
      //expect(instance).to.be();
    });

  });

}));
