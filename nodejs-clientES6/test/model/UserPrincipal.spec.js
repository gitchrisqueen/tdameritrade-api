/**
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitChrisQueen_TDA_JS.UserPrincipal();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserPrincipal', function() {
    it('should create an instance of UserPrincipal', function() {
      // uncomment below and update the code to test UserPrincipal
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be.a(GitChrisQueen_TDA_JS.UserPrincipal);
    });

    it('should have the property authToken (base name: "authToken")', function() {
      // uncomment below and update the code to test the property authToken
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property userCdDomainId (base name: "userCdDomainId")', function() {
      // uncomment below and update the code to test the property userCdDomainId
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property primaryAccountId (base name: "primaryAccountId")', function() {
      // uncomment below and update the code to test the property primaryAccountId
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property lastLoginTime (base name: "lastLoginTime")', function() {
      // uncomment below and update the code to test the property lastLoginTime
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property tokenExpirationTime (base name: "tokenExpirationTime")', function() {
      // uncomment below and update the code to test the property tokenExpirationTime
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property loginTime (base name: "loginTime")', function() {
      // uncomment below and update the code to test the property loginTime
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property accessLevel (base name: "accessLevel")', function() {
      // uncomment below and update the code to test the property accessLevel
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property stalePassword (base name: "stalePassword")', function() {
      // uncomment below and update the code to test the property stalePassword
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property streamerInfo (base name: "streamerInfo")', function() {
      // uncomment below and update the code to test the property streamerInfo
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property professionalStatus (base name: "professionalStatus")', function() {
      // uncomment below and update the code to test the property professionalStatus
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property quotes (base name: "quotes")', function() {
      // uncomment below and update the code to test the property quotes
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property streamerSubscriptionKeys (base name: "streamerSubscriptionKeys")', function() {
      // uncomment below and update the code to test the property streamerSubscriptionKeys
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

    it('should have the property accounts (base name: "accounts")', function() {
      // uncomment below and update the code to test the property accounts
      //var instane = new GitChrisQueen_TDA_JS.UserPrincipal();
      //expect(instance).to.be();
    });

  });

}));
