/**
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitChrisQueen_TDA_JS.Transaction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Transaction', function() {
    it('should create an instance of Transaction', function() {
      // uncomment below and update the code to test Transaction
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be.a(GitChrisQueen_TDA_JS.Transaction);
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property clearingReferenceNumber (base name: "clearingReferenceNumber")', function() {
      // uncomment below and update the code to test the property clearingReferenceNumber
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property subAccount (base name: "subAccount")', function() {
      // uncomment below and update the code to test the property subAccount
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property settlementDate (base name: "settlementDate")', function() {
      // uncomment below and update the code to test the property settlementDate
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property orderId (base name: "orderId")', function() {
      // uncomment below and update the code to test the property orderId
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property sma (base name: "sma")', function() {
      // uncomment below and update the code to test the property sma
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property requirementReallocationAmount (base name: "requirementReallocationAmount")', function() {
      // uncomment below and update the code to test the property requirementReallocationAmount
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property dayTradeBuyingPowerEffect (base name: "dayTradeBuyingPowerEffect")', function() {
      // uncomment below and update the code to test the property dayTradeBuyingPowerEffect
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property netAmount (base name: "netAmount")', function() {
      // uncomment below and update the code to test the property netAmount
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transactionDate (base name: "transactionDate")', function() {
      // uncomment below and update the code to test the property transactionDate
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property orderDate (base name: "orderDate")', function() {
      // uncomment below and update the code to test the property orderDate
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transactionSubType (base name: "transactionSubType")', function() {
      // uncomment below and update the code to test the property transactionSubType
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transactionId (base name: "transactionId")', function() {
      // uncomment below and update the code to test the property transactionId
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property cashBalanceEffectFlag (base name: "cashBalanceEffectFlag")', function() {
      // uncomment below and update the code to test the property cashBalanceEffectFlag
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property achStatus (base name: "achStatus")', function() {
      // uncomment below and update the code to test the property achStatus
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property accruedInterest (base name: "accruedInterest")', function() {
      // uncomment below and update the code to test the property accruedInterest
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property fees (base name: "fees")', function() {
      // uncomment below and update the code to test the property fees
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transactionItem (base name: "transactionItem")', function() {
      // uncomment below and update the code to test the property transactionItem
      //var instane = new GitChrisQueen_TDA_JS.Transaction();
      //expect(instance).to.be();
    });

  });

}));
