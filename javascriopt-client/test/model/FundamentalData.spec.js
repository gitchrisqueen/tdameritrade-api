/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 1.0.0-oas3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.@GitchrisqueenTdameritradeApi);
  }
}(this, function(expect, @GitchrisqueenTdameritradeApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FundamentalData', function() {
      beforeEach(function() {
        instance = new @GitchrisqueenTdameritradeApi.FundamentalData();
      });

      it('should create an instance of FundamentalData', function() {
        // TODO: update the code to test FundamentalData
        expect(instance).to.be.a(@GitchrisqueenTdameritradeApi.FundamentalData);
      });

      it('should have the property Beta (base name: "beta")', function() {
        // TODO: update the code to test the property Beta
        expect(instance).to.have.property('Beta');
        // expect(instance.Beta).to.be(expectedValueLiteral);
      });

      it('should have the property BookValuePerShare (base name: "bookValuePerShare")', function() {
        // TODO: update the code to test the property BookValuePerShare
        expect(instance).to.have.property('BookValuePerShare');
        // expect(instance.BookValuePerShare).to.be(expectedValueLiteral);
      });

      it('should have the property CurrentRatio (base name: "currentRatio")', function() {
        // TODO: update the code to test the property CurrentRatio
        expect(instance).to.have.property('CurrentRatio');
        // expect(instance.CurrentRatio).to.be(expectedValueLiteral);
      });

      it('should have the property DivGrowthRate3Year (base name: "divGrowthRate3Year")', function() {
        // TODO: update the code to test the property DivGrowthRate3Year
        expect(instance).to.have.property('DivGrowthRate3Year');
        // expect(instance.DivGrowthRate3Year).to.be(expectedValueLiteral);
      });

      it('should have the property DividendAmount (base name: "dividendAmount")', function() {
        // TODO: update the code to test the property DividendAmount
        expect(instance).to.have.property('DividendAmount');
        // expect(instance.DividendAmount).to.be(expectedValueLiteral);
      });

      it('should have the property DividendDate (base name: "dividendDate")', function() {
        // TODO: update the code to test the property DividendDate
        expect(instance).to.have.property('DividendDate');
        // expect(instance.DividendDate).to.be(expectedValueLiteral);
      });

      it('should have the property DividendPayAmount (base name: "dividendPayAmount")', function() {
        // TODO: update the code to test the property DividendPayAmount
        expect(instance).to.have.property('DividendPayAmount');
        // expect(instance.DividendPayAmount).to.be(expectedValueLiteral);
      });

      it('should have the property DividendPayDate (base name: "dividendPayDate")', function() {
        // TODO: update the code to test the property DividendPayDate
        expect(instance).to.have.property('DividendPayDate');
        // expect(instance.DividendPayDate).to.be(expectedValueLiteral);
      });

      it('should have the property DividendYield (base name: "dividendYield")', function() {
        // TODO: update the code to test the property DividendYield
        expect(instance).to.have.property('DividendYield');
        // expect(instance.DividendYield).to.be(expectedValueLiteral);
      });

      it('should have the property EpsChange (base name: "epsChange")', function() {
        // TODO: update the code to test the property EpsChange
        expect(instance).to.have.property('EpsChange');
        // expect(instance.EpsChange).to.be(expectedValueLiteral);
      });

      it('should have the property EpsChangePercentTTM (base name: "epsChangePercentTTM")', function() {
        // TODO: update the code to test the property EpsChangePercentTTM
        expect(instance).to.have.property('EpsChangePercentTTM');
        // expect(instance.EpsChangePercentTTM).to.be(expectedValueLiteral);
      });

      it('should have the property EpsChangeYear (base name: "epsChangeYear")', function() {
        // TODO: update the code to test the property EpsChangeYear
        expect(instance).to.have.property('EpsChangeYear');
        // expect(instance.EpsChangeYear).to.be(expectedValueLiteral);
      });

      it('should have the property EpsTTM (base name: "epsTTM")', function() {
        // TODO: update the code to test the property EpsTTM
        expect(instance).to.have.property('EpsTTM');
        // expect(instance.EpsTTM).to.be(expectedValueLiteral);
      });

      it('should have the property GrossMarginMRQ (base name: "grossMarginMRQ")', function() {
        // TODO: update the code to test the property GrossMarginMRQ
        expect(instance).to.have.property('GrossMarginMRQ');
        // expect(instance.GrossMarginMRQ).to.be(expectedValueLiteral);
      });

      it('should have the property GrossMarginTTM (base name: "grossMarginTTM")', function() {
        // TODO: update the code to test the property GrossMarginTTM
        expect(instance).to.have.property('GrossMarginTTM');
        // expect(instance.GrossMarginTTM).to.be(expectedValueLiteral);
      });

      it('should have the property High52 (base name: "high52")', function() {
        // TODO: update the code to test the property High52
        expect(instance).to.have.property('High52');
        // expect(instance.High52).to.be(expectedValueLiteral);
      });

      it('should have the property InterestCoverage (base name: "interestCoverage")', function() {
        // TODO: update the code to test the property InterestCoverage
        expect(instance).to.have.property('InterestCoverage');
        // expect(instance.InterestCoverage).to.be(expectedValueLiteral);
      });

      it('should have the property Low52 (base name: "low52")', function() {
        // TODO: update the code to test the property Low52
        expect(instance).to.have.property('Low52');
        // expect(instance.Low52).to.be(expectedValueLiteral);
      });

      it('should have the property LtDebtToEquity (base name: "ltDebtToEquity")', function() {
        // TODO: update the code to test the property LtDebtToEquity
        expect(instance).to.have.property('LtDebtToEquity');
        // expect(instance.LtDebtToEquity).to.be(expectedValueLiteral);
      });

      it('should have the property MarketCap (base name: "marketCap")', function() {
        // TODO: update the code to test the property MarketCap
        expect(instance).to.have.property('MarketCap');
        // expect(instance.MarketCap).to.be(expectedValueLiteral);
      });

      it('should have the property MarketCapFloat (base name: "marketCapFloat")', function() {
        // TODO: update the code to test the property MarketCapFloat
        expect(instance).to.have.property('MarketCapFloat');
        // expect(instance.MarketCapFloat).to.be(expectedValueLiteral);
      });

      it('should have the property NetProfitMarginMRQ (base name: "netProfitMarginMRQ")', function() {
        // TODO: update the code to test the property NetProfitMarginMRQ
        expect(instance).to.have.property('NetProfitMarginMRQ');
        // expect(instance.NetProfitMarginMRQ).to.be(expectedValueLiteral);
      });

      it('should have the property NetProfitMarginTTM (base name: "netProfitMarginTTM")', function() {
        // TODO: update the code to test the property NetProfitMarginTTM
        expect(instance).to.have.property('NetProfitMarginTTM');
        // expect(instance.NetProfitMarginTTM).to.be(expectedValueLiteral);
      });

      it('should have the property OperatingMarginMRQ (base name: "operatingMarginMRQ")', function() {
        // TODO: update the code to test the property OperatingMarginMRQ
        expect(instance).to.have.property('OperatingMarginMRQ');
        // expect(instance.OperatingMarginMRQ).to.be(expectedValueLiteral);
      });

      it('should have the property OperatingMarginTTM (base name: "operatingMarginTTM")', function() {
        // TODO: update the code to test the property OperatingMarginTTM
        expect(instance).to.have.property('OperatingMarginTTM');
        // expect(instance.OperatingMarginTTM).to.be(expectedValueLiteral);
      });

      it('should have the property PbRatio (base name: "pbRatio")', function() {
        // TODO: update the code to test the property PbRatio
        expect(instance).to.have.property('PbRatio');
        // expect(instance.PbRatio).to.be(expectedValueLiteral);
      });

      it('should have the property PcfRatio (base name: "pcfRatio")', function() {
        // TODO: update the code to test the property PcfRatio
        expect(instance).to.have.property('PcfRatio');
        // expect(instance.PcfRatio).to.be(expectedValueLiteral);
      });

      it('should have the property PeRatio (base name: "peRatio")', function() {
        // TODO: update the code to test the property PeRatio
        expect(instance).to.have.property('PeRatio');
        // expect(instance.PeRatio).to.be(expectedValueLiteral);
      });

      it('should have the property PegRatio (base name: "pegRatio")', function() {
        // TODO: update the code to test the property PegRatio
        expect(instance).to.have.property('PegRatio');
        // expect(instance.PegRatio).to.be(expectedValueLiteral);
      });

      it('should have the property PrRatio (base name: "prRatio")', function() {
        // TODO: update the code to test the property PrRatio
        expect(instance).to.have.property('PrRatio');
        // expect(instance.PrRatio).to.be(expectedValueLiteral);
      });

      it('should have the property QuickRatio (base name: "quickRatio")', function() {
        // TODO: update the code to test the property QuickRatio
        expect(instance).to.have.property('QuickRatio');
        // expect(instance.QuickRatio).to.be(expectedValueLiteral);
      });

      it('should have the property ReturnOnAssets (base name: "returnOnAssets")', function() {
        // TODO: update the code to test the property ReturnOnAssets
        expect(instance).to.have.property('ReturnOnAssets');
        // expect(instance.ReturnOnAssets).to.be(expectedValueLiteral);
      });

      it('should have the property ReturnOnEquity (base name: "returnOnEquity")', function() {
        // TODO: update the code to test the property ReturnOnEquity
        expect(instance).to.have.property('ReturnOnEquity');
        // expect(instance.ReturnOnEquity).to.be(expectedValueLiteral);
      });

      it('should have the property ReturnOnInvestment (base name: "returnOnInvestment")', function() {
        // TODO: update the code to test the property ReturnOnInvestment
        expect(instance).to.have.property('ReturnOnInvestment');
        // expect(instance.ReturnOnInvestment).to.be(expectedValueLiteral);
      });

      it('should have the property RevChangeIn (base name: "revChangeIn")', function() {
        // TODO: update the code to test the property RevChangeIn
        expect(instance).to.have.property('RevChangeIn');
        // expect(instance.RevChangeIn).to.be(expectedValueLiteral);
      });

      it('should have the property RevChangeTTM (base name: "revChangeTTM")', function() {
        // TODO: update the code to test the property RevChangeTTM
        expect(instance).to.have.property('RevChangeTTM');
        // expect(instance.RevChangeTTM).to.be(expectedValueLiteral);
      });

      it('should have the property RevChangeYear (base name: "revChangeYear")', function() {
        // TODO: update the code to test the property RevChangeYear
        expect(instance).to.have.property('RevChangeYear');
        // expect(instance.RevChangeYear).to.be(expectedValueLiteral);
      });

      it('should have the property SharesOutstanding (base name: "sharesOutstanding")', function() {
        // TODO: update the code to test the property SharesOutstanding
        expect(instance).to.have.property('SharesOutstanding');
        // expect(instance.SharesOutstanding).to.be(expectedValueLiteral);
      });

      it('should have the property ShortIntDayToCover (base name: "shortIntDayToCover")', function() {
        // TODO: update the code to test the property ShortIntDayToCover
        expect(instance).to.have.property('ShortIntDayToCover');
        // expect(instance.ShortIntDayToCover).to.be(expectedValueLiteral);
      });

      it('should have the property ShortIntToFloat (base name: "shortIntToFloat")', function() {
        // TODO: update the code to test the property ShortIntToFloat
        expect(instance).to.have.property('ShortIntToFloat');
        // expect(instance.ShortIntToFloat).to.be(expectedValueLiteral);
      });

      it('should have the property Symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property Symbol
        expect(instance).to.have.property('Symbol');
        // expect(instance.Symbol).to.be(expectedValueLiteral);
      });

      it('should have the property TotalDebtToCapital (base name: "totalDebtToCapital")', function() {
        // TODO: update the code to test the property TotalDebtToCapital
        expect(instance).to.have.property('TotalDebtToCapital');
        // expect(instance.TotalDebtToCapital).to.be(expectedValueLiteral);
      });

      it('should have the property TotalDebtToEquity (base name: "totalDebtToEquity")', function() {
        // TODO: update the code to test the property TotalDebtToEquity
        expect(instance).to.have.property('TotalDebtToEquity');
        // expect(instance.TotalDebtToEquity).to.be(expectedValueLiteral);
      });

      it('should have the property Vol10DayAvg (base name: "vol10DayAvg")', function() {
        // TODO: update the code to test the property Vol10DayAvg
        expect(instance).to.have.property('Vol10DayAvg');
        // expect(instance.Vol10DayAvg).to.be(expectedValueLiteral);
      });

      it('should have the property Vol1DayAvg (base name: "vol1DayAvg")', function() {
        // TODO: update the code to test the property Vol1DayAvg
        expect(instance).to.have.property('Vol1DayAvg');
        // expect(instance.Vol1DayAvg).to.be(expectedValueLiteral);
      });

      it('should have the property Vol3MonthAvg (base name: "vol3MonthAvg")', function() {
        // TODO: update the code to test the property Vol3MonthAvg
        expect(instance).to.have.property('Vol3MonthAvg');
        // expect(instance.Vol3MonthAvg).to.be(expectedValueLiteral);
      });

    });
  });

}));
