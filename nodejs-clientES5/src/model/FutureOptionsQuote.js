/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GitChrisQueen_TDA_JS) {
      root.GitChrisQueen_TDA_JS = {};
    }
    root.GitChrisQueen_TDA_JS.FutureOptionsQuote = factory(root.GitChrisQueen_TDA_JS.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The FutureOptionsQuote model module.
   * @module model/FutureOptionsQuote
   * @version 0.1.4
   */

  /**
   * Constructs a new <code>FutureOptionsQuote</code>.
   * @alias module:model/FutureOptionsQuote
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>FutureOptionsQuote</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FutureOptionsQuote} obj Optional instance to populate.
   * @return {module:model/FutureOptionsQuote} The populated <code>FutureOptionsQuote</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('askPriceInDouble'))
        obj.askPriceInDouble = ApiClient.convertToType(data['askPriceInDouble'], 'Number');
      if (data.hasOwnProperty('bidPriceInDouble'))
        obj.bidPriceInDouble = ApiClient.convertToType(data['bidPriceInDouble'], 'Number');
      if (data.hasOwnProperty('closePriceInDouble'))
        obj.closePriceInDouble = ApiClient.convertToType(data['closePriceInDouble'], 'Number');
      if (data.hasOwnProperty('contractType'))
        obj.contractType = ApiClient.convertToType(data['contractType'], 'String');
      if (data.hasOwnProperty('deltaInDouble'))
        obj.deltaInDouble = ApiClient.convertToType(data['deltaInDouble'], 'Number');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('digits'))
        obj.digits = ApiClient.convertToType(data['digits'], 'Number');
      if (data.hasOwnProperty('exchangeName'))
        obj.exchangeName = ApiClient.convertToType(data['exchangeName'], 'String');
      if (data.hasOwnProperty('exerciseType'))
        obj.exerciseType = ApiClient.convertToType(data['exerciseType'], 'String');
      if (data.hasOwnProperty('expirationType'))
        obj.expirationType = ApiClient.convertToType(data['expirationType'], 'String');
      if (data.hasOwnProperty('futureExpirationDate'))
        obj.futureExpirationDate = ApiClient.convertToType(data['futureExpirationDate'], 'Number');
      if (data.hasOwnProperty('futureIsActive'))
        obj.futureIsActive = ApiClient.convertToType(data['futureIsActive'], 'Boolean');
      if (data.hasOwnProperty('futureIsTradable'))
        obj.futureIsTradable = ApiClient.convertToType(data['futureIsTradable'], 'Boolean');
      if (data.hasOwnProperty('futurePercentChange'))
        obj.futurePercentChange = ApiClient.convertToType(data['futurePercentChange'], 'Number');
      if (data.hasOwnProperty('futureTradingHours'))
        obj.futureTradingHours = ApiClient.convertToType(data['futureTradingHours'], 'String');
      if (data.hasOwnProperty('gammaInDouble'))
        obj.gammaInDouble = ApiClient.convertToType(data['gammaInDouble'], 'Number');
      if (data.hasOwnProperty('highPriceInDouble'))
        obj.highPriceInDouble = ApiClient.convertToType(data['highPriceInDouble'], 'Number');
      if (data.hasOwnProperty('inTheMoney'))
        obj.inTheMoney = ApiClient.convertToType(data['inTheMoney'], 'Boolean');
      if (data.hasOwnProperty('lastPriceInDouble'))
        obj.lastPriceInDouble = ApiClient.convertToType(data['lastPriceInDouble'], 'Number');
      if (data.hasOwnProperty('lowPriceInDouble'))
        obj.lowPriceInDouble = ApiClient.convertToType(data['lowPriceInDouble'], 'Number');
      if (data.hasOwnProperty('mark'))
        obj.mark = ApiClient.convertToType(data['mark'], 'Number');
      if (data.hasOwnProperty('moneyIntrinsicValueInDouble'))
        obj.moneyIntrinsicValueInDouble = ApiClient.convertToType(data['moneyIntrinsicValueInDouble'], 'Number');
      if (data.hasOwnProperty('multiplierInDouble'))
        obj.multiplierInDouble = ApiClient.convertToType(data['multiplierInDouble'], 'Number');
      if (data.hasOwnProperty('netChangeInDouble'))
        obj.netChangeInDouble = ApiClient.convertToType(data['netChangeInDouble'], 'Number');
      if (data.hasOwnProperty('openInterest'))
        obj.openInterest = ApiClient.convertToType(data['openInterest'], 'Number');
      if (data.hasOwnProperty('openPriceInDouble'))
        obj.openPriceInDouble = ApiClient.convertToType(data['openPriceInDouble'], 'Number');
      if (data.hasOwnProperty('rhoInDouble'))
        obj.rhoInDouble = ApiClient.convertToType(data['rhoInDouble'], 'Number');
      if (data.hasOwnProperty('securityStatus'))
        obj.securityStatus = ApiClient.convertToType(data['securityStatus'], 'String');
      if (data.hasOwnProperty('strikePriceInDouble'))
        obj.strikePriceInDouble = ApiClient.convertToType(data['strikePriceInDouble'], 'Number');
      if (data.hasOwnProperty('symbol'))
        obj.symbol = ApiClient.convertToType(data['symbol'], 'String');
      if (data.hasOwnProperty('thetaInDouble'))
        obj.thetaInDouble = ApiClient.convertToType(data['thetaInDouble'], 'Number');
      if (data.hasOwnProperty('tick'))
        obj.tick = ApiClient.convertToType(data['tick'], 'Number');
      if (data.hasOwnProperty('tickAmount'))
        obj.tickAmount = ApiClient.convertToType(data['tickAmount'], 'Number');
      if (data.hasOwnProperty('timeValueInDouble'))
        obj.timeValueInDouble = ApiClient.convertToType(data['timeValueInDouble'], 'Number');
      if (data.hasOwnProperty('underlying'))
        obj.underlying = ApiClient.convertToType(data['underlying'], 'String');
      if (data.hasOwnProperty('vegaInDouble'))
        obj.vegaInDouble = ApiClient.convertToType(data['vegaInDouble'], 'Number');
      if (data.hasOwnProperty('volatility'))
        obj.volatility = ApiClient.convertToType(data['volatility'], 'Number');
    }
    return obj;
  }

  /**
   * @member {Number} askPriceInDouble
   */
  exports.prototype.askPriceInDouble = undefined;

  /**
   * @member {Number} bidPriceInDouble
   */
  exports.prototype.bidPriceInDouble = undefined;

  /**
   * @member {Number} closePriceInDouble
   */
  exports.prototype.closePriceInDouble = undefined;

  /**
   * @member {String} contractType
   */
  exports.prototype.contractType = undefined;

  /**
   * @member {Number} deltaInDouble
   */
  exports.prototype.deltaInDouble = undefined;

  /**
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * @member {Number} digits
   */
  exports.prototype.digits = undefined;

  /**
   * @member {String} exchangeName
   */
  exports.prototype.exchangeName = undefined;

  /**
   * @member {String} exerciseType
   */
  exports.prototype.exerciseType = undefined;

  /**
   * @member {String} expirationType
   */
  exports.prototype.expirationType = undefined;

  /**
   * @member {Number} futureExpirationDate
   */
  exports.prototype.futureExpirationDate = undefined;

  /**
   * @member {Boolean} futureIsActive
   */
  exports.prototype.futureIsActive = undefined;

  /**
   * @member {Boolean} futureIsTradable
   */
  exports.prototype.futureIsTradable = undefined;

  /**
   * @member {Number} futurePercentChange
   */
  exports.prototype.futurePercentChange = undefined;

  /**
   * @member {String} futureTradingHours
   */
  exports.prototype.futureTradingHours = undefined;

  /**
   * @member {Number} gammaInDouble
   */
  exports.prototype.gammaInDouble = undefined;

  /**
   * @member {Number} highPriceInDouble
   */
  exports.prototype.highPriceInDouble = undefined;

  /**
   * @member {Boolean} inTheMoney
   */
  exports.prototype.inTheMoney = undefined;

  /**
   * @member {Number} lastPriceInDouble
   */
  exports.prototype.lastPriceInDouble = undefined;

  /**
   * @member {Number} lowPriceInDouble
   */
  exports.prototype.lowPriceInDouble = undefined;

  /**
   * @member {Number} mark
   */
  exports.prototype.mark = undefined;

  /**
   * @member {Number} moneyIntrinsicValueInDouble
   */
  exports.prototype.moneyIntrinsicValueInDouble = undefined;

  /**
   * @member {Number} multiplierInDouble
   */
  exports.prototype.multiplierInDouble = undefined;

  /**
   * @member {Number} netChangeInDouble
   */
  exports.prototype.netChangeInDouble = undefined;

  /**
   * @member {Number} openInterest
   */
  exports.prototype.openInterest = undefined;

  /**
   * @member {Number} openPriceInDouble
   */
  exports.prototype.openPriceInDouble = undefined;

  /**
   * @member {Number} rhoInDouble
   */
  exports.prototype.rhoInDouble = undefined;

  /**
   * @member {String} securityStatus
   */
  exports.prototype.securityStatus = undefined;

  /**
   * @member {Number} strikePriceInDouble
   */
  exports.prototype.strikePriceInDouble = undefined;

  /**
   * @member {String} symbol
   */
  exports.prototype.symbol = undefined;

  /**
   * @member {Number} thetaInDouble
   */
  exports.prototype.thetaInDouble = undefined;

  /**
   * @member {Number} tick
   */
  exports.prototype.tick = undefined;

  /**
   * @member {Number} tickAmount
   */
  exports.prototype.tickAmount = undefined;

  /**
   * @member {Number} timeValueInDouble
   */
  exports.prototype.timeValueInDouble = undefined;

  /**
   * @member {String} underlying
   */
  exports.prototype.underlying = undefined;

  /**
   * @member {Number} vegaInDouble
   */
  exports.prototype.vegaInDouble = undefined;

  /**
   * @member {Number} volatility
   */
  exports.prototype.volatility = undefined;

  return exports;

}));
