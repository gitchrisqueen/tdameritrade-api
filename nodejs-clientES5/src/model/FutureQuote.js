/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.GitChrisQueen_TDA_JS) {
      root.GitChrisQueen_TDA_JS = {};
    }
    root.GitChrisQueen_TDA_JS.FutureQuote = factory(root.GitChrisQueen_TDA_JS.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The FutureQuote model module.
   * @module model/FutureQuote
   * @version 0.1.4
   */

  /**
   * Constructs a new <code>FutureQuote</code>.
   * @alias module:model/FutureQuote
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>FutureQuote</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FutureQuote} obj Optional instance to populate.
   * @return {module:model/FutureQuote} The populated <code>FutureQuote</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('askId'))
        obj.askId = ApiClient.convertToType(data['askId'], 'String');
      if (data.hasOwnProperty('askPriceInDouble'))
        obj.askPriceInDouble = ApiClient.convertToType(data['askPriceInDouble'], 'Number');
      if (data.hasOwnProperty('bidId'))
        obj.bidId = ApiClient.convertToType(data['bidId'], 'String');
      if (data.hasOwnProperty('bidPriceInDouble'))
        obj.bidPriceInDouble = ApiClient.convertToType(data['bidPriceInDouble'], 'Number');
      if (data.hasOwnProperty('changeInDouble'))
        obj.changeInDouble = ApiClient.convertToType(data['changeInDouble'], 'Number');
      if (data.hasOwnProperty('closePriceInDouble'))
        obj.closePriceInDouble = ApiClient.convertToType(data['closePriceInDouble'], 'Number');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('exchange'))
        obj.exchange = ApiClient.convertToType(data['exchange'], 'String');
      if (data.hasOwnProperty('exchangeName'))
        obj.exchangeName = ApiClient.convertToType(data['exchangeName'], 'String');
      if (data.hasOwnProperty('futureActiveSymbol'))
        obj.futureActiveSymbol = ApiClient.convertToType(data['futureActiveSymbol'], 'String');
      if (data.hasOwnProperty('futureExpirationDate'))
        obj.futureExpirationDate = ApiClient.convertToType(data['futureExpirationDate'], 'String');
      if (data.hasOwnProperty('futureIsActive'))
        obj.futureIsActive = ApiClient.convertToType(data['futureIsActive'], 'Boolean');
      if (data.hasOwnProperty('futureIsTradable'))
        obj.futureIsTradable = ApiClient.convertToType(data['futureIsTradable'], 'Boolean');
      if (data.hasOwnProperty('futureMultiplier'))
        obj.futureMultiplier = ApiClient.convertToType(data['futureMultiplier'], 'Number');
      if (data.hasOwnProperty('futurePercentChange'))
        obj.futurePercentChange = ApiClient.convertToType(data['futurePercentChange'], 'Number');
      if (data.hasOwnProperty('futurePriceFormat'))
        obj.futurePriceFormat = ApiClient.convertToType(data['futurePriceFormat'], 'String');
      if (data.hasOwnProperty('futureSettlementPrice'))
        obj.futureSettlementPrice = ApiClient.convertToType(data['futureSettlementPrice'], 'Number');
      if (data.hasOwnProperty('futureTradinghours'))
        obj.futureTradinghours = ApiClient.convertToType(data['futureTradinghours'], 'String');
      if (data.hasOwnProperty('highPriceInDouble'))
        obj.highPriceInDouble = ApiClient.convertToType(data['highPriceInDouble'], 'Number');
      if (data.hasOwnProperty('lastId'))
        obj.lastId = ApiClient.convertToType(data['lastId'], 'String');
      if (data.hasOwnProperty('lastPriceInDouble'))
        obj.lastPriceInDouble = ApiClient.convertToType(data['lastPriceInDouble'], 'Number');
      if (data.hasOwnProperty('lowPriceInDouble'))
        obj.lowPriceInDouble = ApiClient.convertToType(data['lowPriceInDouble'], 'Number');
      if (data.hasOwnProperty('mark'))
        obj.mark = ApiClient.convertToType(data['mark'], 'Number');
      if (data.hasOwnProperty('openInterest'))
        obj.openInterest = ApiClient.convertToType(data['openInterest'], 'Number');
      if (data.hasOwnProperty('openPriceInDouble'))
        obj.openPriceInDouble = ApiClient.convertToType(data['openPriceInDouble'], 'Number');
      if (data.hasOwnProperty('product'))
        obj.product = ApiClient.convertToType(data['product'], 'String');
      if (data.hasOwnProperty('securityStatus'))
        obj.securityStatus = ApiClient.convertToType(data['securityStatus'], 'String');
      if (data.hasOwnProperty('symbol'))
        obj.symbol = ApiClient.convertToType(data['symbol'], 'String');
      if (data.hasOwnProperty('tick'))
        obj.tick = ApiClient.convertToType(data['tick'], 'Number');
      if (data.hasOwnProperty('tickAmount'))
        obj.tickAmount = ApiClient.convertToType(data['tickAmount'], 'Number');
    }
    return obj;
  }

  /**
   * @member {String} askId
   */
  exports.prototype.askId = undefined;

  /**
   * @member {Number} askPriceInDouble
   */
  exports.prototype.askPriceInDouble = undefined;

  /**
   * @member {String} bidId
   */
  exports.prototype.bidId = undefined;

  /**
   * @member {Number} bidPriceInDouble
   */
  exports.prototype.bidPriceInDouble = undefined;

  /**
   * @member {Number} changeInDouble
   */
  exports.prototype.changeInDouble = undefined;

  /**
   * @member {Number} closePriceInDouble
   */
  exports.prototype.closePriceInDouble = undefined;

  /**
   * @member {String} description
   */
  exports.prototype.description = undefined;

  /**
   * @member {String} exchange
   */
  exports.prototype.exchange = undefined;

  /**
   * @member {String} exchangeName
   */
  exports.prototype.exchangeName = undefined;

  /**
   * @member {String} futureActiveSymbol
   */
  exports.prototype.futureActiveSymbol = undefined;

  /**
   * @member {String} futureExpirationDate
   */
  exports.prototype.futureExpirationDate = undefined;

  /**
   * @member {Boolean} futureIsActive
   */
  exports.prototype.futureIsActive = undefined;

  /**
   * @member {Boolean} futureIsTradable
   */
  exports.prototype.futureIsTradable = undefined;

  /**
   * @member {Number} futureMultiplier
   */
  exports.prototype.futureMultiplier = undefined;

  /**
   * @member {Number} futurePercentChange
   */
  exports.prototype.futurePercentChange = undefined;

  /**
   * @member {String} futurePriceFormat
   */
  exports.prototype.futurePriceFormat = undefined;

  /**
   * @member {Number} futureSettlementPrice
   */
  exports.prototype.futureSettlementPrice = undefined;

  /**
   * @member {String} futureTradinghours
   */
  exports.prototype.futureTradinghours = undefined;

  /**
   * @member {Number} highPriceInDouble
   */
  exports.prototype.highPriceInDouble = undefined;

  /**
   * @member {String} lastId
   */
  exports.prototype.lastId = undefined;

  /**
   * @member {Number} lastPriceInDouble
   */
  exports.prototype.lastPriceInDouble = undefined;

  /**
   * @member {Number} lowPriceInDouble
   */
  exports.prototype.lowPriceInDouble = undefined;

  /**
   * @member {Number} mark
   */
  exports.prototype.mark = undefined;

  /**
   * @member {Number} openInterest
   */
  exports.prototype.openInterest = undefined;

  /**
   * @member {Number} openPriceInDouble
   */
  exports.prototype.openPriceInDouble = undefined;

  /**
   * @member {String} product
   */
  exports.prototype.product = undefined;

  /**
   * @member {String} securityStatus
   */
  exports.prototype.securityStatus = undefined;

  /**
   * @member {String} symbol
   */
  exports.prototype.symbol = undefined;

  /**
   * @member {Number} tick
   */
  exports.prototype.tick = undefined;

  /**
   * @member {Number} tickAmount
   */
  exports.prototype.tickAmount = undefined;

  return exports;

}));
