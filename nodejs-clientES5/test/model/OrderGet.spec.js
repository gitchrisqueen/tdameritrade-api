/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OrderGet', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.OrderGet();
      });

      it('should create an instance of OrderGet', function() {
        // TODO: update the code to test OrderGet
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.OrderGet);
      });

      it('should have the property accountId (base name: "accountId")', function() {
        // TODO: update the code to test the property accountId
        expect(instance).to.have.property('accountId');
        // expect(instance.accountId).to.be(expectedValueLiteral);
      });

      it('should have the property activationPrice (base name: "activationPrice")', function() {
        // TODO: update the code to test the property activationPrice
        expect(instance).to.have.property('activationPrice');
        // expect(instance.activationPrice).to.be(expectedValueLiteral);
      });

      it('should have the property cancelTime (base name: "cancelTime")', function() {
        // TODO: update the code to test the property cancelTime
        expect(instance).to.have.property('cancelTime');
        // expect(instance.cancelTime).to.be(expectedValueLiteral);
      });

      it('should have the property cancelable (base name: "cancelable")', function() {
        // TODO: update the code to test the property cancelable
        expect(instance).to.have.property('cancelable');
        // expect(instance.cancelable).to.be(expectedValueLiteral);
      });

      it('should have the property childOrderStrategies (base name: "childOrderStrategies")', function() {
        // TODO: update the code to test the property childOrderStrategies
        expect(instance).to.have.property('childOrderStrategies');
        // expect(instance.childOrderStrategies).to.be(expectedValueLiteral);
      });

      it('should have the property closedTime (base name: "closedTime")', function() {
        // TODO: update the code to test the property closedTime
        expect(instance).to.have.property('closedTime');
        // expect(instance.closedTime).to.be(expectedValueLiteral);
      });

      it('should have the property complexOrderStrategyType (base name: "complexOrderStrategyType")', function() {
        // TODO: update the code to test the property complexOrderStrategyType
        expect(instance).to.have.property('complexOrderStrategyType');
        // expect(instance.complexOrderStrategyType).to.be(expectedValueLiteral);
      });

      it('should have the property destinationLinkName (base name: "destinationLinkName")', function() {
        // TODO: update the code to test the property destinationLinkName
        expect(instance).to.have.property('destinationLinkName');
        // expect(instance.destinationLinkName).to.be(expectedValueLiteral);
      });

      it('should have the property duration (base name: "duration")', function() {
        // TODO: update the code to test the property duration
        expect(instance).to.have.property('duration');
        // expect(instance.duration).to.be(expectedValueLiteral);
      });

      it('should have the property editable (base name: "editable")', function() {
        // TODO: update the code to test the property editable
        expect(instance).to.have.property('editable');
        // expect(instance.editable).to.be(expectedValueLiteral);
      });

      it('should have the property enteredTime (base name: "enteredTime")', function() {
        // TODO: update the code to test the property enteredTime
        expect(instance).to.have.property('enteredTime');
        // expect(instance.enteredTime).to.be(expectedValueLiteral);
      });

      it('should have the property filledQuantity (base name: "filledQuantity")', function() {
        // TODO: update the code to test the property filledQuantity
        expect(instance).to.have.property('filledQuantity');
        // expect(instance.filledQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property orderActivityCollection (base name: "orderActivityCollection")', function() {
        // TODO: update the code to test the property orderActivityCollection
        expect(instance).to.have.property('orderActivityCollection');
        // expect(instance.orderActivityCollection).to.be(expectedValueLiteral);
      });

      it('should have the property orderId (base name: "orderId")', function() {
        // TODO: update the code to test the property orderId
        expect(instance).to.have.property('orderId');
        // expect(instance.orderId).to.be(expectedValueLiteral);
      });

      it('should have the property orderLegCollection (base name: "orderLegCollection")', function() {
        // TODO: update the code to test the property orderLegCollection
        expect(instance).to.have.property('orderLegCollection');
        // expect(instance.orderLegCollection).to.be(expectedValueLiteral);
      });

      it('should have the property orderStrategyType (base name: "orderStrategyType")', function() {
        // TODO: update the code to test the property orderStrategyType
        expect(instance).to.have.property('orderStrategyType');
        // expect(instance.orderStrategyType).to.be(expectedValueLiteral);
      });

      it('should have the property orderType (base name: "orderType")', function() {
        // TODO: update the code to test the property orderType
        expect(instance).to.have.property('orderType');
        // expect(instance.orderType).to.be(expectedValueLiteral);
      });

      it('should have the property price (base name: "price")', function() {
        // TODO: update the code to test the property price
        expect(instance).to.have.property('price');
        // expect(instance.price).to.be(expectedValueLiteral);
      });

      it('should have the property priceLinkBasis (base name: "priceLinkBasis")', function() {
        // TODO: update the code to test the property priceLinkBasis
        expect(instance).to.have.property('priceLinkBasis');
        // expect(instance.priceLinkBasis).to.be(expectedValueLiteral);
      });

      it('should have the property priceLinkType (base name: "priceLinkType")', function() {
        // TODO: update the code to test the property priceLinkType
        expect(instance).to.have.property('priceLinkType');
        // expect(instance.priceLinkType).to.be(expectedValueLiteral);
      });

      it('should have the property quality (base name: "quality")', function() {
        // TODO: update the code to test the property quality
        expect(instance).to.have.property('quality');
        // expect(instance.quality).to.be(expectedValueLiteral);
      });

      it('should have the property releaseTime (base name: "releaseTime")', function() {
        // TODO: update the code to test the property releaseTime
        expect(instance).to.have.property('releaseTime');
        // expect(instance.releaseTime).to.be(expectedValueLiteral);
      });

      it('should have the property remainingQuantity (base name: "remainingQuantity")', function() {
        // TODO: update the code to test the property remainingQuantity
        expect(instance).to.have.property('remainingQuantity');
        // expect(instance.remainingQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property replacingOrderCollection (base name: "replacingOrderCollection")', function() {
        // TODO: update the code to test the property replacingOrderCollection
        expect(instance).to.have.property('replacingOrderCollection');
        // expect(instance.replacingOrderCollection).to.be(expectedValueLiteral);
      });

      it('should have the property requestedDestination (base name: "requestedDestination")', function() {
        // TODO: update the code to test the property requestedDestination
        expect(instance).to.have.property('requestedDestination');
        // expect(instance.requestedDestination).to.be(expectedValueLiteral);
      });

      it('should have the property session (base name: "session")', function() {
        // TODO: update the code to test the property session
        expect(instance).to.have.property('session');
        // expect(instance.session).to.be(expectedValueLiteral);
      });

      it('should have the property specialInstruction (base name: "specialInstruction")', function() {
        // TODO: update the code to test the property specialInstruction
        expect(instance).to.have.property('specialInstruction');
        // expect(instance.specialInstruction).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property statusDescription (base name: "statusDescription")', function() {
        // TODO: update the code to test the property statusDescription
        expect(instance).to.have.property('statusDescription');
        // expect(instance.statusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property stopPrice (base name: "stopPrice")', function() {
        // TODO: update the code to test the property stopPrice
        expect(instance).to.have.property('stopPrice');
        // expect(instance.stopPrice).to.be(expectedValueLiteral);
      });

      it('should have the property stopPriceLinkBasis (base name: "stopPriceLinkBasis")', function() {
        // TODO: update the code to test the property stopPriceLinkBasis
        expect(instance).to.have.property('stopPriceLinkBasis');
        // expect(instance.stopPriceLinkBasis).to.be(expectedValueLiteral);
      });

      it('should have the property stopPriceLinkType (base name: "stopPriceLinkType")', function() {
        // TODO: update the code to test the property stopPriceLinkType
        expect(instance).to.have.property('stopPriceLinkType');
        // expect(instance.stopPriceLinkType).to.be(expectedValueLiteral);
      });

      it('should have the property stopPriceOffset (base name: "stopPriceOffset")', function() {
        // TODO: update the code to test the property stopPriceOffset
        expect(instance).to.have.property('stopPriceOffset');
        // expect(instance.stopPriceOffset).to.be(expectedValueLiteral);
      });

      it('should have the property stopType (base name: "stopType")', function() {
        // TODO: update the code to test the property stopType
        expect(instance).to.have.property('stopType');
        // expect(instance.stopType).to.be(expectedValueLiteral);
      });

      it('should have the property tag (base name: "tag")', function() {
        // TODO: update the code to test the property tag
        expect(instance).to.have.property('tag');
        // expect(instance.tag).to.be(expectedValueLiteral);
      });

      it('should have the property taxLotMethod (base name: "taxLotMethod")', function() {
        // TODO: update the code to test the property taxLotMethod
        expect(instance).to.have.property('taxLotMethod');
        // expect(instance.taxLotMethod).to.be(expectedValueLiteral);
      });

    });
  });

}));
