/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Transaction', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.Transaction();
      });

      it('should create an instance of Transaction', function() {
        // TODO: update the code to test Transaction
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.Transaction);
      });

      it('should have the property accruedInterest (base name: "accruedInterest")', function() {
        // TODO: update the code to test the property accruedInterest
        expect(instance).to.have.property('accruedInterest');
        // expect(instance.accruedInterest).to.be(expectedValueLiteral);
      });

      it('should have the property achStatus (base name: "achStatus")', function() {
        // TODO: update the code to test the property achStatus
        expect(instance).to.have.property('achStatus');
        // expect(instance.achStatus).to.be(expectedValueLiteral);
      });

      it('should have the property cashBalanceEffectFlag (base name: "cashBalanceEffectFlag")', function() {
        // TODO: update the code to test the property cashBalanceEffectFlag
        expect(instance).to.have.property('cashBalanceEffectFlag');
        // expect(instance.cashBalanceEffectFlag).to.be(expectedValueLiteral);
      });

      it('should have the property clearingReferenceNumber (base name: "clearingReferenceNumber")', function() {
        // TODO: update the code to test the property clearingReferenceNumber
        expect(instance).to.have.property('clearingReferenceNumber');
        // expect(instance.clearingReferenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property dayTradeBuyingPowerEffect (base name: "dayTradeBuyingPowerEffect")', function() {
        // TODO: update the code to test the property dayTradeBuyingPowerEffect
        expect(instance).to.have.property('dayTradeBuyingPowerEffect');
        // expect(instance.dayTradeBuyingPowerEffect).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property fees (base name: "fees")', function() {
        // TODO: update the code to test the property fees
        expect(instance).to.have.property('fees');
        // expect(instance.fees).to.be(expectedValueLiteral);
      });

      it('should have the property netAmount (base name: "netAmount")', function() {
        // TODO: update the code to test the property netAmount
        expect(instance).to.have.property('netAmount');
        // expect(instance.netAmount).to.be(expectedValueLiteral);
      });

      it('should have the property orderDate (base name: "orderDate")', function() {
        // TODO: update the code to test the property orderDate
        expect(instance).to.have.property('orderDate');
        // expect(instance.orderDate).to.be(expectedValueLiteral);
      });

      it('should have the property orderId (base name: "orderId")', function() {
        // TODO: update the code to test the property orderId
        expect(instance).to.have.property('orderId');
        // expect(instance.orderId).to.be(expectedValueLiteral);
      });

      it('should have the property requirementReallocationAmount (base name: "requirementReallocationAmount")', function() {
        // TODO: update the code to test the property requirementReallocationAmount
        expect(instance).to.have.property('requirementReallocationAmount');
        // expect(instance.requirementReallocationAmount).to.be(expectedValueLiteral);
      });

      it('should have the property settlementDate (base name: "settlementDate")', function() {
        // TODO: update the code to test the property settlementDate
        expect(instance).to.have.property('settlementDate');
        // expect(instance.settlementDate).to.be(expectedValueLiteral);
      });

      it('should have the property sma (base name: "sma")', function() {
        // TODO: update the code to test the property sma
        expect(instance).to.have.property('sma');
        // expect(instance.sma).to.be(expectedValueLiteral);
      });

      it('should have the property subAccount (base name: "subAccount")', function() {
        // TODO: update the code to test the property subAccount
        expect(instance).to.have.property('subAccount');
        // expect(instance.subAccount).to.be(expectedValueLiteral);
      });

      it('should have the property transactionDate (base name: "transactionDate")', function() {
        // TODO: update the code to test the property transactionDate
        expect(instance).to.have.property('transactionDate');
        // expect(instance.transactionDate).to.be(expectedValueLiteral);
      });

      it('should have the property transactionId (base name: "transactionId")', function() {
        // TODO: update the code to test the property transactionId
        expect(instance).to.have.property('transactionId');
        // expect(instance.transactionId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionItem (base name: "transactionItem")', function() {
        // TODO: update the code to test the property transactionItem
        expect(instance).to.have.property('transactionItem');
        // expect(instance.transactionItem).to.be(expectedValueLiteral);
      });

      it('should have the property transactionSubType (base name: "transactionSubType")', function() {
        // TODO: update the code to test the property transactionSubType
        expect(instance).to.have.property('transactionSubType');
        // expect(instance.transactionSubType).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

    });
  });

}));
