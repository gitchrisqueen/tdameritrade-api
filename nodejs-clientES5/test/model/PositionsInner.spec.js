/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('PositionsInner', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.PositionsInner();
      });

      it('should create an instance of PositionsInner', function() {
        // TODO: update the code to test PositionsInner
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.PositionsInner);
      });

      it('should have the property agedQuantity (base name: "agedQuantity")', function() {
        // TODO: update the code to test the property agedQuantity
        expect(instance).to.have.property('agedQuantity');
        // expect(instance.agedQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property averagePrice (base name: "averagePrice")', function() {
        // TODO: update the code to test the property averagePrice
        expect(instance).to.have.property('averagePrice');
        // expect(instance.averagePrice).to.be(expectedValueLiteral);
      });

      it('should have the property currentDayProfitLoss (base name: "currentDayProfitLoss")', function() {
        // TODO: update the code to test the property currentDayProfitLoss
        expect(instance).to.have.property('currentDayProfitLoss');
        // expect(instance.currentDayProfitLoss).to.be(expectedValueLiteral);
      });

      it('should have the property currentDayProfitLossPercentage (base name: "currentDayProfitLossPercentage")', function() {
        // TODO: update the code to test the property currentDayProfitLossPercentage
        expect(instance).to.have.property('currentDayProfitLossPercentage');
        // expect(instance.currentDayProfitLossPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property instrument (base name: "instrument")', function() {
        // TODO: update the code to test the property instrument
        expect(instance).to.have.property('instrument');
        // expect(instance.instrument).to.be(expectedValueLiteral);
      });

      it('should have the property longQuantity (base name: "longQuantity")', function() {
        // TODO: update the code to test the property longQuantity
        expect(instance).to.have.property('longQuantity');
        // expect(instance.longQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property settledLongQuantity (base name: "settledLongQuantity")', function() {
        // TODO: update the code to test the property settledLongQuantity
        expect(instance).to.have.property('settledLongQuantity');
        // expect(instance.settledLongQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property settledShortQuantity (base name: "settledShortQuantity")', function() {
        // TODO: update the code to test the property settledShortQuantity
        expect(instance).to.have.property('settledShortQuantity');
        // expect(instance.settledShortQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property shortQuantity (base name: "shortQuantity")', function() {
        // TODO: update the code to test the property shortQuantity
        expect(instance).to.have.property('shortQuantity');
        // expect(instance.shortQuantity).to.be(expectedValueLiteral);
      });

    });
  });

}));
