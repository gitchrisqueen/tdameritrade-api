/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ForexQuote', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.ForexQuote();
      });

      it('should create an instance of ForexQuote', function() {
        // TODO: update the code to test ForexQuote
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.ForexQuote);
      });

      it('should have the property _52WkHighInDouble (base name: "52WkHighInDouble")', function() {
        // TODO: update the code to test the property _52WkHighInDouble
        expect(instance).to.have.property('_52WkHighInDouble');
        // expect(instance._52WkHighInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property _52WkLowInDouble (base name: "52WkLowInDouble")', function() {
        // TODO: update the code to test the property _52WkLowInDouble
        expect(instance).to.have.property('_52WkLowInDouble');
        // expect(instance._52WkLowInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property askPriceInDouble (base name: "askPriceInDouble")', function() {
        // TODO: update the code to test the property askPriceInDouble
        expect(instance).to.have.property('askPriceInDouble');
        // expect(instance.askPriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property bidPriceInDouble (base name: "bidPriceInDouble")', function() {
        // TODO: update the code to test the property bidPriceInDouble
        expect(instance).to.have.property('bidPriceInDouble');
        // expect(instance.bidPriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property changeInDouble (base name: "changeInDouble")', function() {
        // TODO: update the code to test the property changeInDouble
        expect(instance).to.have.property('changeInDouble');
        // expect(instance.changeInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property closePriceInDouble (base name: "closePriceInDouble")', function() {
        // TODO: update the code to test the property closePriceInDouble
        expect(instance).to.have.property('closePriceInDouble');
        // expect(instance.closePriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property digits (base name: "digits")', function() {
        // TODO: update the code to test the property digits
        expect(instance).to.have.property('digits');
        // expect(instance.digits).to.be(expectedValueLiteral);
      });

      it('should have the property exchange (base name: "exchange")', function() {
        // TODO: update the code to test the property exchange
        expect(instance).to.have.property('exchange');
        // expect(instance.exchange).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeName (base name: "exchangeName")', function() {
        // TODO: update the code to test the property exchangeName
        expect(instance).to.have.property('exchangeName');
        // expect(instance.exchangeName).to.be(expectedValueLiteral);
      });

      it('should have the property highPriceInDouble (base name: "highPriceInDouble")', function() {
        // TODO: update the code to test the property highPriceInDouble
        expect(instance).to.have.property('highPriceInDouble');
        // expect(instance.highPriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property isTradable (base name: "isTradable")', function() {
        // TODO: update the code to test the property isTradable
        expect(instance).to.have.property('isTradable');
        // expect(instance.isTradable).to.be(expectedValueLiteral);
      });

      it('should have the property lastPriceInDouble (base name: "lastPriceInDouble")', function() {
        // TODO: update the code to test the property lastPriceInDouble
        expect(instance).to.have.property('lastPriceInDouble');
        // expect(instance.lastPriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property lowPriceInDouble (base name: "lowPriceInDouble")', function() {
        // TODO: update the code to test the property lowPriceInDouble
        expect(instance).to.have.property('lowPriceInDouble');
        // expect(instance.lowPriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property mark (base name: "mark")', function() {
        // TODO: update the code to test the property mark
        expect(instance).to.have.property('mark');
        // expect(instance.mark).to.be(expectedValueLiteral);
      });

      it('should have the property marketMaker (base name: "marketMaker")', function() {
        // TODO: update the code to test the property marketMaker
        expect(instance).to.have.property('marketMaker');
        // expect(instance.marketMaker).to.be(expectedValueLiteral);
      });

      it('should have the property openPriceInDouble (base name: "openPriceInDouble")', function() {
        // TODO: update the code to test the property openPriceInDouble
        expect(instance).to.have.property('openPriceInDouble');
        // expect(instance.openPriceInDouble).to.be(expectedValueLiteral);
      });

      it('should have the property percentChange (base name: "percentChange")', function() {
        // TODO: update the code to test the property percentChange
        expect(instance).to.have.property('percentChange');
        // expect(instance.percentChange).to.be(expectedValueLiteral);
      });

      it('should have the property product (base name: "product")', function() {
        // TODO: update the code to test the property product
        expect(instance).to.have.property('product');
        // expect(instance.product).to.be(expectedValueLiteral);
      });

      it('should have the property securityStatus (base name: "securityStatus")', function() {
        // TODO: update the code to test the property securityStatus
        expect(instance).to.have.property('securityStatus');
        // expect(instance.securityStatus).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property tick (base name: "tick")', function() {
        // TODO: update the code to test the property tick
        expect(instance).to.have.property('tick');
        // expect(instance.tick).to.be(expectedValueLiteral);
      });

      it('should have the property tickAmount (base name: "tickAmount")', function() {
        // TODO: update the code to test the property tickAmount
        expect(instance).to.have.property('tickAmount');
        // expect(instance.tickAmount).to.be(expectedValueLiteral);
      });

      it('should have the property tradingHours (base name: "tradingHours")', function() {
        // TODO: update the code to test the property tradingHours
        expect(instance).to.have.property('tradingHours');
        // expect(instance.tradingHours).to.be(expectedValueLiteral);
      });

    });
  });

}));
