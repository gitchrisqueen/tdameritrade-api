/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserPrincipalStreamerInfo', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.UserPrincipalStreamerInfo();
      });

      it('should create an instance of UserPrincipalStreamerInfo', function() {
        // TODO: update the code to test UserPrincipalStreamerInfo
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalStreamerInfo);
      });

      it('should have the property accessLevel (base name: "accessLevel")', function() {
        // TODO: update the code to test the property accessLevel
        expect(instance).to.have.property('accessLevel');
        // expect(instance.accessLevel).to.be(expectedValueLiteral);
      });

      it('should have the property acl (base name: "acl")', function() {
        // TODO: update the code to test the property acl
        expect(instance).to.have.property('acl');
        // expect(instance.acl).to.be(expectedValueLiteral);
      });

      it('should have the property appId (base name: "appId")', function() {
        // TODO: update the code to test the property appId
        expect(instance).to.have.property('appId');
        // expect(instance.appId).to.be(expectedValueLiteral);
      });

      it('should have the property streamerBinaryUrl (base name: "streamerBinaryUrl")', function() {
        // TODO: update the code to test the property streamerBinaryUrl
        expect(instance).to.have.property('streamerBinaryUrl');
        // expect(instance.streamerBinaryUrl).to.be(expectedValueLiteral);
      });

      it('should have the property streamerSocketUrl (base name: "streamerSocketUrl")', function() {
        // TODO: update the code to test the property streamerSocketUrl
        expect(instance).to.have.property('streamerSocketUrl');
        // expect(instance.streamerSocketUrl).to.be(expectedValueLiteral);
      });

      it('should have the property token (base name: "token")', function() {
        // TODO: update the code to test the property token
        expect(instance).to.have.property('token');
        // expect(instance.token).to.be(expectedValueLiteral);
      });

      it('should have the property tokenTimestamp (base name: "tokenTimestamp")', function() {
        // TODO: update the code to test the property tokenTimestamp
        expect(instance).to.have.property('tokenTimestamp');
        // expect(instance.tokenTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property userGroup (base name: "userGroup")', function() {
        // TODO: update the code to test the property userGroup
        expect(instance).to.have.property('userGroup');
        // expect(instance.userGroup).to.be(expectedValueLiteral);
      });

    });
  });

}));
