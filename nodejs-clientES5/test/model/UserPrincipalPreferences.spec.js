/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserPrincipalPreferences', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.UserPrincipalPreferences();
      });

      it('should create an instance of UserPrincipalPreferences', function() {
        // TODO: update the code to test UserPrincipalPreferences
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferences);
      });

      it('should have the property authTokenTimeout (base name: "authTokenTimeout")', function() {
        // TODO: update the code to test the property authTokenTimeout
        expect(instance).to.have.property('authTokenTimeout');
        // expect(instance.authTokenTimeout).to.be(expectedValueLiteral);
      });

      it('should have the property defaultAdvancedToolLaunch (base name: "defaultAdvancedToolLaunch")', function() {
        // TODO: update the code to test the property defaultAdvancedToolLaunch
        expect(instance).to.have.property('defaultAdvancedToolLaunch');
        // expect(instance.defaultAdvancedToolLaunch).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEquityOrderDuration (base name: "defaultEquityOrderDuration")', function() {
        // TODO: update the code to test the property defaultEquityOrderDuration
        expect(instance).to.have.property('defaultEquityOrderDuration');
        // expect(instance.defaultEquityOrderDuration).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEquityOrderLegInstruction (base name: "defaultEquityOrderLegInstruction")', function() {
        // TODO: update the code to test the property defaultEquityOrderLegInstruction
        expect(instance).to.have.property('defaultEquityOrderLegInstruction');
        // expect(instance.defaultEquityOrderLegInstruction).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEquityOrderMarketSession (base name: "defaultEquityOrderMarketSession")', function() {
        // TODO: update the code to test the property defaultEquityOrderMarketSession
        expect(instance).to.have.property('defaultEquityOrderMarketSession');
        // expect(instance.defaultEquityOrderMarketSession).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEquityOrderPriceLinkType (base name: "defaultEquityOrderPriceLinkType")', function() {
        // TODO: update the code to test the property defaultEquityOrderPriceLinkType
        expect(instance).to.have.property('defaultEquityOrderPriceLinkType');
        // expect(instance.defaultEquityOrderPriceLinkType).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEquityOrderType (base name: "defaultEquityOrderType")', function() {
        // TODO: update the code to test the property defaultEquityOrderType
        expect(instance).to.have.property('defaultEquityOrderType');
        // expect(instance.defaultEquityOrderType).to.be(expectedValueLiteral);
      });

      it('should have the property defaultEquityQuantity (base name: "defaultEquityQuantity")', function() {
        // TODO: update the code to test the property defaultEquityQuantity
        expect(instance).to.have.property('defaultEquityQuantity');
        // expect(instance.defaultEquityQuantity).to.be(expectedValueLiteral);
      });

      it('should have the property directEquityRouting (base name: "directEquityRouting")', function() {
        // TODO: update the code to test the property directEquityRouting
        expect(instance).to.have.property('directEquityRouting');
        // expect(instance.directEquityRouting).to.be(expectedValueLiteral);
      });

      it('should have the property directOptionsRouting (base name: "directOptionsRouting")', function() {
        // TODO: update the code to test the property directOptionsRouting
        expect(instance).to.have.property('directOptionsRouting');
        // expect(instance.directOptionsRouting).to.be(expectedValueLiteral);
      });

      it('should have the property equityTaxLotMethod (base name: "equityTaxLotMethod")', function() {
        // TODO: update the code to test the property equityTaxLotMethod
        expect(instance).to.have.property('equityTaxLotMethod');
        // expect(instance.equityTaxLotMethod).to.be(expectedValueLiteral);
      });

      it('should have the property expressTrading (base name: "expressTrading")', function() {
        // TODO: update the code to test the property expressTrading
        expect(instance).to.have.property('expressTrading');
        // expect(instance.expressTrading).to.be(expectedValueLiteral);
      });

      it('should have the property mutualFundTaxLotMethod (base name: "mutualFundTaxLotMethod")', function() {
        // TODO: update the code to test the property mutualFundTaxLotMethod
        expect(instance).to.have.property('mutualFundTaxLotMethod');
        // expect(instance.mutualFundTaxLotMethod).to.be(expectedValueLiteral);
      });

      it('should have the property optionTaxLotMethod (base name: "optionTaxLotMethod")', function() {
        // TODO: update the code to test the property optionTaxLotMethod
        expect(instance).to.have.property('optionTaxLotMethod');
        // expect(instance.optionTaxLotMethod).to.be(expectedValueLiteral);
      });

    });
  });

}));
