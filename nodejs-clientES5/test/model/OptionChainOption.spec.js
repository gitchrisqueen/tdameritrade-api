/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OptionChainOption', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.OptionChainOption();
      });

      it('should create an instance of OptionChainOption', function() {
        // TODO: update the code to test OptionChainOption
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.OptionChainOption);
      });

      it('should have the property askPrice (base name: "askPrice")', function() {
        // TODO: update the code to test the property askPrice
        expect(instance).to.have.property('askPrice');
        // expect(instance.askPrice).to.be(expectedValueLiteral);
      });

      it('should have the property askSize (base name: "askSize")', function() {
        // TODO: update the code to test the property askSize
        expect(instance).to.have.property('askSize');
        // expect(instance.askSize).to.be(expectedValueLiteral);
      });

      it('should have the property bidPrice (base name: "bidPrice")', function() {
        // TODO: update the code to test the property bidPrice
        expect(instance).to.have.property('bidPrice');
        // expect(instance.bidPrice).to.be(expectedValueLiteral);
      });

      it('should have the property bidSize (base name: "bidSize")', function() {
        // TODO: update the code to test the property bidSize
        expect(instance).to.have.property('bidSize');
        // expect(instance.bidSize).to.be(expectedValueLiteral);
      });

      it('should have the property closePrice (base name: "closePrice")', function() {
        // TODO: update the code to test the property closePrice
        expect(instance).to.have.property('closePrice');
        // expect(instance.closePrice).to.be(expectedValueLiteral);
      });

      it('should have the property delta (base name: "delta")', function() {
        // TODO: update the code to test the property delta
        expect(instance).to.have.property('delta');
        // expect(instance.delta).to.be(expectedValueLiteral);
      });

      it('should have the property delverableNote (base name: "delverableNote")', function() {
        // TODO: update the code to test the property delverableNote
        expect(instance).to.have.property('delverableNote');
        // expect(instance.delverableNote).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeName (base name: "exchangeName")', function() {
        // TODO: update the code to test the property exchangeName
        expect(instance).to.have.property('exchangeName');
        // expect(instance.exchangeName).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expirationDate")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property expirationType (base name: "expirationType")', function() {
        // TODO: update the code to test the property expirationType
        expect(instance).to.have.property('expirationType');
        // expect(instance.expirationType).to.be(expectedValueLiteral);
      });

      it('should have the property gamma (base name: "gamma")', function() {
        // TODO: update the code to test the property gamma
        expect(instance).to.have.property('gamma');
        // expect(instance.gamma).to.be(expectedValueLiteral);
      });

      it('should have the property highPrice (base name: "highPrice")', function() {
        // TODO: update the code to test the property highPrice
        expect(instance).to.have.property('highPrice');
        // expect(instance.highPrice).to.be(expectedValueLiteral);
      });

      it('should have the property isInTheMoney (base name: "isInTheMoney")', function() {
        // TODO: update the code to test the property isInTheMoney
        expect(instance).to.have.property('isInTheMoney');
        // expect(instance.isInTheMoney).to.be(expectedValueLiteral);
      });

      it('should have the property isIndexOption (base name: "isIndexOption")', function() {
        // TODO: update the code to test the property isIndexOption
        expect(instance).to.have.property('isIndexOption');
        // expect(instance.isIndexOption).to.be(expectedValueLiteral);
      });

      it('should have the property isMini (base name: "isMini")', function() {
        // TODO: update the code to test the property isMini
        expect(instance).to.have.property('isMini');
        // expect(instance.isMini).to.be(expectedValueLiteral);
      });

      it('should have the property isNonStandard (base name: "isNonStandard")', function() {
        // TODO: update the code to test the property isNonStandard
        expect(instance).to.have.property('isNonStandard');
        // expect(instance.isNonStandard).to.be(expectedValueLiteral);
      });

      it('should have the property lastPrice (base name: "lastPrice")', function() {
        // TODO: update the code to test the property lastPrice
        expect(instance).to.have.property('lastPrice');
        // expect(instance.lastPrice).to.be(expectedValueLiteral);
      });

      it('should have the property lastSize (base name: "lastSize")', function() {
        // TODO: update the code to test the property lastSize
        expect(instance).to.have.property('lastSize');
        // expect(instance.lastSize).to.be(expectedValueLiteral);
      });

      it('should have the property lowPrice (base name: "lowPrice")', function() {
        // TODO: update the code to test the property lowPrice
        expect(instance).to.have.property('lowPrice');
        // expect(instance.lowPrice).to.be(expectedValueLiteral);
      });

      it('should have the property markChange (base name: "markChange")', function() {
        // TODO: update the code to test the property markChange
        expect(instance).to.have.property('markChange');
        // expect(instance.markChange).to.be(expectedValueLiteral);
      });

      it('should have the property markPercentChange (base name: "markPercentChange")', function() {
        // TODO: update the code to test the property markPercentChange
        expect(instance).to.have.property('markPercentChange');
        // expect(instance.markPercentChange).to.be(expectedValueLiteral);
      });

      it('should have the property markPrice (base name: "markPrice")', function() {
        // TODO: update the code to test the property markPrice
        expect(instance).to.have.property('markPrice');
        // expect(instance.markPrice).to.be(expectedValueLiteral);
      });

      it('should have the property multiplier (base name: "multiplier")', function() {
        // TODO: update the code to test the property multiplier
        expect(instance).to.have.property('multiplier');
        // expect(instance.multiplier).to.be(expectedValueLiteral);
      });

      it('should have the property netChange (base name: "netChange")', function() {
        // TODO: update the code to test the property netChange
        expect(instance).to.have.property('netChange');
        // expect(instance.netChange).to.be(expectedValueLiteral);
      });

      it('should have the property opePrice (base name: "opePrice")', function() {
        // TODO: update the code to test the property opePrice
        expect(instance).to.have.property('opePrice');
        // expect(instance.opePrice).to.be(expectedValueLiteral);
      });

      it('should have the property openInterest (base name: "openInterest")', function() {
        // TODO: update the code to test the property openInterest
        expect(instance).to.have.property('openInterest');
        // expect(instance.openInterest).to.be(expectedValueLiteral);
      });

      it('should have the property optionDeliverablesList (base name: "optionDeliverablesList")', function() {
        // TODO: update the code to test the property optionDeliverablesList
        expect(instance).to.have.property('optionDeliverablesList');
        // expect(instance.optionDeliverablesList).to.be(expectedValueLiteral);
      });

      it('should have the property percentChange (base name: "percentChange")', function() {
        // TODO: update the code to test the property percentChange
        expect(instance).to.have.property('percentChange');
        // expect(instance.percentChange).to.be(expectedValueLiteral);
      });

      it('should have the property putCall (base name: "putCall")', function() {
        // TODO: update the code to test the property putCall
        expect(instance).to.have.property('putCall');
        // expect(instance.putCall).to.be(expectedValueLiteral);
      });

      it('should have the property quoteTimeInLong (base name: "quoteTimeInLong")', function() {
        // TODO: update the code to test the property quoteTimeInLong
        expect(instance).to.have.property('quoteTimeInLong');
        // expect(instance.quoteTimeInLong).to.be(expectedValueLiteral);
      });

      it('should have the property rho (base name: "rho")', function() {
        // TODO: update the code to test the property rho
        expect(instance).to.have.property('rho');
        // expect(instance.rho).to.be(expectedValueLiteral);
      });

      it('should have the property settlementType (base name: "settlementType")', function() {
        // TODO: update the code to test the property settlementType
        expect(instance).to.have.property('settlementType');
        // expect(instance.settlementType).to.be(expectedValueLiteral);
      });

      it('should have the property strikePrice (base name: "strikePrice")', function() {
        // TODO: update the code to test the property strikePrice
        expect(instance).to.have.property('strikePrice');
        // expect(instance.strikePrice).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property theoreticalOptionValue (base name: "theoreticalOptionValue")', function() {
        // TODO: update the code to test the property theoreticalOptionValue
        expect(instance).to.have.property('theoreticalOptionValue');
        // expect(instance.theoreticalOptionValue).to.be(expectedValueLiteral);
      });

      it('should have the property theoreticalVolatility (base name: "theoreticalVolatility")', function() {
        // TODO: update the code to test the property theoreticalVolatility
        expect(instance).to.have.property('theoreticalVolatility');
        // expect(instance.theoreticalVolatility).to.be(expectedValueLiteral);
      });

      it('should have the property theta (base name: "theta")', function() {
        // TODO: update the code to test the property theta
        expect(instance).to.have.property('theta');
        // expect(instance.theta).to.be(expectedValueLiteral);
      });

      it('should have the property timeValue (base name: "timeValue")', function() {
        // TODO: update the code to test the property timeValue
        expect(instance).to.have.property('timeValue');
        // expect(instance.timeValue).to.be(expectedValueLiteral);
      });

      it('should have the property totalVolume (base name: "totalVolume")', function() {
        // TODO: update the code to test the property totalVolume
        expect(instance).to.have.property('totalVolume');
        // expect(instance.totalVolume).to.be(expectedValueLiteral);
      });

      it('should have the property tradeTimeInLong (base name: "tradeTimeInLong")', function() {
        // TODO: update the code to test the property tradeTimeInLong
        expect(instance).to.have.property('tradeTimeInLong');
        // expect(instance.tradeTimeInLong).to.be(expectedValueLiteral);
      });

      it('should have the property vega (base name: "vega")', function() {
        // TODO: update the code to test the property vega
        expect(instance).to.have.property('vega');
        // expect(instance.vega).to.be(expectedValueLiteral);
      });

      it('should have the property volatility (base name: "volatility")', function() {
        // TODO: update the code to test the property volatility
        expect(instance).to.have.property('volatility');
        // expect(instance.volatility).to.be(expectedValueLiteral);
      });

    });
  });

}));
