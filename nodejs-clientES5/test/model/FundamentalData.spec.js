/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FundamentalData', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.FundamentalData();
      });

      it('should create an instance of FundamentalData', function() {
        // TODO: update the code to test FundamentalData
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.FundamentalData);
      });

      it('should have the property beta (base name: "beta")', function() {
        // TODO: update the code to test the property beta
        expect(instance).to.have.property('beta');
        // expect(instance.beta).to.be(expectedValueLiteral);
      });

      it('should have the property bookValuePerShare (base name: "bookValuePerShare")', function() {
        // TODO: update the code to test the property bookValuePerShare
        expect(instance).to.have.property('bookValuePerShare');
        // expect(instance.bookValuePerShare).to.be(expectedValueLiteral);
      });

      it('should have the property currentRatio (base name: "currentRatio")', function() {
        // TODO: update the code to test the property currentRatio
        expect(instance).to.have.property('currentRatio');
        // expect(instance.currentRatio).to.be(expectedValueLiteral);
      });

      it('should have the property divGrowthRate3Year (base name: "divGrowthRate3Year")', function() {
        // TODO: update the code to test the property divGrowthRate3Year
        expect(instance).to.have.property('divGrowthRate3Year');
        // expect(instance.divGrowthRate3Year).to.be(expectedValueLiteral);
      });

      it('should have the property dividendAmount (base name: "dividendAmount")', function() {
        // TODO: update the code to test the property dividendAmount
        expect(instance).to.have.property('dividendAmount');
        // expect(instance.dividendAmount).to.be(expectedValueLiteral);
      });

      it('should have the property dividendDate (base name: "dividendDate")', function() {
        // TODO: update the code to test the property dividendDate
        expect(instance).to.have.property('dividendDate');
        // expect(instance.dividendDate).to.be(expectedValueLiteral);
      });

      it('should have the property dividendPayAmount (base name: "dividendPayAmount")', function() {
        // TODO: update the code to test the property dividendPayAmount
        expect(instance).to.have.property('dividendPayAmount');
        // expect(instance.dividendPayAmount).to.be(expectedValueLiteral);
      });

      it('should have the property dividendPayDate (base name: "dividendPayDate")', function() {
        // TODO: update the code to test the property dividendPayDate
        expect(instance).to.have.property('dividendPayDate');
        // expect(instance.dividendPayDate).to.be(expectedValueLiteral);
      });

      it('should have the property dividendYield (base name: "dividendYield")', function() {
        // TODO: update the code to test the property dividendYield
        expect(instance).to.have.property('dividendYield');
        // expect(instance.dividendYield).to.be(expectedValueLiteral);
      });

      it('should have the property epsChange (base name: "epsChange")', function() {
        // TODO: update the code to test the property epsChange
        expect(instance).to.have.property('epsChange');
        // expect(instance.epsChange).to.be(expectedValueLiteral);
      });

      it('should have the property epsChangePercentTTM (base name: "epsChangePercentTTM")', function() {
        // TODO: update the code to test the property epsChangePercentTTM
        expect(instance).to.have.property('epsChangePercentTTM');
        // expect(instance.epsChangePercentTTM).to.be(expectedValueLiteral);
      });

      it('should have the property epsChangeYear (base name: "epsChangeYear")', function() {
        // TODO: update the code to test the property epsChangeYear
        expect(instance).to.have.property('epsChangeYear');
        // expect(instance.epsChangeYear).to.be(expectedValueLiteral);
      });

      it('should have the property epsTTM (base name: "epsTTM")', function() {
        // TODO: update the code to test the property epsTTM
        expect(instance).to.have.property('epsTTM');
        // expect(instance.epsTTM).to.be(expectedValueLiteral);
      });

      it('should have the property grossMarginMRQ (base name: "grossMarginMRQ")', function() {
        // TODO: update the code to test the property grossMarginMRQ
        expect(instance).to.have.property('grossMarginMRQ');
        // expect(instance.grossMarginMRQ).to.be(expectedValueLiteral);
      });

      it('should have the property grossMarginTTM (base name: "grossMarginTTM")', function() {
        // TODO: update the code to test the property grossMarginTTM
        expect(instance).to.have.property('grossMarginTTM');
        // expect(instance.grossMarginTTM).to.be(expectedValueLiteral);
      });

      it('should have the property high52 (base name: "high52")', function() {
        // TODO: update the code to test the property high52
        expect(instance).to.have.property('high52');
        // expect(instance.high52).to.be(expectedValueLiteral);
      });

      it('should have the property interestCoverage (base name: "interestCoverage")', function() {
        // TODO: update the code to test the property interestCoverage
        expect(instance).to.have.property('interestCoverage');
        // expect(instance.interestCoverage).to.be(expectedValueLiteral);
      });

      it('should have the property low52 (base name: "low52")', function() {
        // TODO: update the code to test the property low52
        expect(instance).to.have.property('low52');
        // expect(instance.low52).to.be(expectedValueLiteral);
      });

      it('should have the property ltDebtToEquity (base name: "ltDebtToEquity")', function() {
        // TODO: update the code to test the property ltDebtToEquity
        expect(instance).to.have.property('ltDebtToEquity');
        // expect(instance.ltDebtToEquity).to.be(expectedValueLiteral);
      });

      it('should have the property marketCap (base name: "marketCap")', function() {
        // TODO: update the code to test the property marketCap
        expect(instance).to.have.property('marketCap');
        // expect(instance.marketCap).to.be(expectedValueLiteral);
      });

      it('should have the property marketCapFloat (base name: "marketCapFloat")', function() {
        // TODO: update the code to test the property marketCapFloat
        expect(instance).to.have.property('marketCapFloat');
        // expect(instance.marketCapFloat).to.be(expectedValueLiteral);
      });

      it('should have the property netProfitMarginMRQ (base name: "netProfitMarginMRQ")', function() {
        // TODO: update the code to test the property netProfitMarginMRQ
        expect(instance).to.have.property('netProfitMarginMRQ');
        // expect(instance.netProfitMarginMRQ).to.be(expectedValueLiteral);
      });

      it('should have the property netProfitMarginTTM (base name: "netProfitMarginTTM")', function() {
        // TODO: update the code to test the property netProfitMarginTTM
        expect(instance).to.have.property('netProfitMarginTTM');
        // expect(instance.netProfitMarginTTM).to.be(expectedValueLiteral);
      });

      it('should have the property operatingMarginMRQ (base name: "operatingMarginMRQ")', function() {
        // TODO: update the code to test the property operatingMarginMRQ
        expect(instance).to.have.property('operatingMarginMRQ');
        // expect(instance.operatingMarginMRQ).to.be(expectedValueLiteral);
      });

      it('should have the property operatingMarginTTM (base name: "operatingMarginTTM")', function() {
        // TODO: update the code to test the property operatingMarginTTM
        expect(instance).to.have.property('operatingMarginTTM');
        // expect(instance.operatingMarginTTM).to.be(expectedValueLiteral);
      });

      it('should have the property pbRatio (base name: "pbRatio")', function() {
        // TODO: update the code to test the property pbRatio
        expect(instance).to.have.property('pbRatio');
        // expect(instance.pbRatio).to.be(expectedValueLiteral);
      });

      it('should have the property pcfRatio (base name: "pcfRatio")', function() {
        // TODO: update the code to test the property pcfRatio
        expect(instance).to.have.property('pcfRatio');
        // expect(instance.pcfRatio).to.be(expectedValueLiteral);
      });

      it('should have the property peRatio (base name: "peRatio")', function() {
        // TODO: update the code to test the property peRatio
        expect(instance).to.have.property('peRatio');
        // expect(instance.peRatio).to.be(expectedValueLiteral);
      });

      it('should have the property pegRatio (base name: "pegRatio")', function() {
        // TODO: update the code to test the property pegRatio
        expect(instance).to.have.property('pegRatio');
        // expect(instance.pegRatio).to.be(expectedValueLiteral);
      });

      it('should have the property prRatio (base name: "prRatio")', function() {
        // TODO: update the code to test the property prRatio
        expect(instance).to.have.property('prRatio');
        // expect(instance.prRatio).to.be(expectedValueLiteral);
      });

      it('should have the property quickRatio (base name: "quickRatio")', function() {
        // TODO: update the code to test the property quickRatio
        expect(instance).to.have.property('quickRatio');
        // expect(instance.quickRatio).to.be(expectedValueLiteral);
      });

      it('should have the property returnOnAssets (base name: "returnOnAssets")', function() {
        // TODO: update the code to test the property returnOnAssets
        expect(instance).to.have.property('returnOnAssets');
        // expect(instance.returnOnAssets).to.be(expectedValueLiteral);
      });

      it('should have the property returnOnEquity (base name: "returnOnEquity")', function() {
        // TODO: update the code to test the property returnOnEquity
        expect(instance).to.have.property('returnOnEquity');
        // expect(instance.returnOnEquity).to.be(expectedValueLiteral);
      });

      it('should have the property returnOnInvestment (base name: "returnOnInvestment")', function() {
        // TODO: update the code to test the property returnOnInvestment
        expect(instance).to.have.property('returnOnInvestment');
        // expect(instance.returnOnInvestment).to.be(expectedValueLiteral);
      });

      it('should have the property revChangeIn (base name: "revChangeIn")', function() {
        // TODO: update the code to test the property revChangeIn
        expect(instance).to.have.property('revChangeIn');
        // expect(instance.revChangeIn).to.be(expectedValueLiteral);
      });

      it('should have the property revChangeTTM (base name: "revChangeTTM")', function() {
        // TODO: update the code to test the property revChangeTTM
        expect(instance).to.have.property('revChangeTTM');
        // expect(instance.revChangeTTM).to.be(expectedValueLiteral);
      });

      it('should have the property revChangeYear (base name: "revChangeYear")', function() {
        // TODO: update the code to test the property revChangeYear
        expect(instance).to.have.property('revChangeYear');
        // expect(instance.revChangeYear).to.be(expectedValueLiteral);
      });

      it('should have the property sharesOutstanding (base name: "sharesOutstanding")', function() {
        // TODO: update the code to test the property sharesOutstanding
        expect(instance).to.have.property('sharesOutstanding');
        // expect(instance.sharesOutstanding).to.be(expectedValueLiteral);
      });

      it('should have the property shortIntDayToCover (base name: "shortIntDayToCover")', function() {
        // TODO: update the code to test the property shortIntDayToCover
        expect(instance).to.have.property('shortIntDayToCover');
        // expect(instance.shortIntDayToCover).to.be(expectedValueLiteral);
      });

      it('should have the property shortIntToFloat (base name: "shortIntToFloat")', function() {
        // TODO: update the code to test the property shortIntToFloat
        expect(instance).to.have.property('shortIntToFloat');
        // expect(instance.shortIntToFloat).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property totalDebtToCapital (base name: "totalDebtToCapital")', function() {
        // TODO: update the code to test the property totalDebtToCapital
        expect(instance).to.have.property('totalDebtToCapital');
        // expect(instance.totalDebtToCapital).to.be(expectedValueLiteral);
      });

      it('should have the property totalDebtToEquity (base name: "totalDebtToEquity")', function() {
        // TODO: update the code to test the property totalDebtToEquity
        expect(instance).to.have.property('totalDebtToEquity');
        // expect(instance.totalDebtToEquity).to.be(expectedValueLiteral);
      });

      it('should have the property vol10DayAvg (base name: "vol10DayAvg")', function() {
        // TODO: update the code to test the property vol10DayAvg
        expect(instance).to.have.property('vol10DayAvg');
        // expect(instance.vol10DayAvg).to.be(expectedValueLiteral);
      });

      it('should have the property vol1DayAvg (base name: "vol1DayAvg")', function() {
        // TODO: update the code to test the property vol1DayAvg
        expect(instance).to.have.property('vol1DayAvg');
        // expect(instance.vol1DayAvg).to.be(expectedValueLiteral);
      });

      it('should have the property vol3MonthAvg (base name: "vol3MonthAvg")', function() {
        // TODO: update the code to test the property vol3MonthAvg
        expect(instance).to.have.property('vol3MonthAvg');
        // expect(instance.vol3MonthAvg).to.be(expectedValueLiteral);
      });

    });
  });

}));
