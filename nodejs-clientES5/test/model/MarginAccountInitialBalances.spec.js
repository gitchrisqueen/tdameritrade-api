/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MarginAccountInitialBalances', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.MarginAccountInitialBalances();
      });

      it('should create an instance of MarginAccountInitialBalances', function() {
        // TODO: update the code to test MarginAccountInitialBalances
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.MarginAccountInitialBalances);
      });

      it('should have the property accountValue (base name: "accountValue")', function() {
        // TODO: update the code to test the property accountValue
        expect(instance).to.have.property('accountValue');
        // expect(instance.accountValue).to.be(expectedValueLiteral);
      });

      it('should have the property accruedInterest (base name: "accruedInterest")', function() {
        // TODO: update the code to test the property accruedInterest
        expect(instance).to.have.property('accruedInterest');
        // expect(instance.accruedInterest).to.be(expectedValueLiteral);
      });

      it('should have the property availableFundsNonMarginableTrade (base name: "availableFundsNonMarginableTrade")', function() {
        // TODO: update the code to test the property availableFundsNonMarginableTrade
        expect(instance).to.have.property('availableFundsNonMarginableTrade');
        // expect(instance.availableFundsNonMarginableTrade).to.be(expectedValueLiteral);
      });

      it('should have the property bondValue (base name: "bondValue")', function() {
        // TODO: update the code to test the property bondValue
        expect(instance).to.have.property('bondValue');
        // expect(instance.bondValue).to.be(expectedValueLiteral);
      });

      it('should have the property buyingPower (base name: "buyingPower")', function() {
        // TODO: update the code to test the property buyingPower
        expect(instance).to.have.property('buyingPower');
        // expect(instance.buyingPower).to.be(expectedValueLiteral);
      });

      it('should have the property cashAvailableForTrading (base name: "cashAvailableForTrading")', function() {
        // TODO: update the code to test the property cashAvailableForTrading
        expect(instance).to.have.property('cashAvailableForTrading');
        // expect(instance.cashAvailableForTrading).to.be(expectedValueLiteral);
      });

      it('should have the property cashBalance (base name: "cashBalance")', function() {
        // TODO: update the code to test the property cashBalance
        expect(instance).to.have.property('cashBalance');
        // expect(instance.cashBalance).to.be(expectedValueLiteral);
      });

      it('should have the property cashReceipts (base name: "cashReceipts")', function() {
        // TODO: update the code to test the property cashReceipts
        expect(instance).to.have.property('cashReceipts');
        // expect(instance.cashReceipts).to.be(expectedValueLiteral);
      });

      it('should have the property dayTradingBuyingPower (base name: "dayTradingBuyingPower")', function() {
        // TODO: update the code to test the property dayTradingBuyingPower
        expect(instance).to.have.property('dayTradingBuyingPower');
        // expect(instance.dayTradingBuyingPower).to.be(expectedValueLiteral);
      });

      it('should have the property dayTradingBuyingPowerCall (base name: "dayTradingBuyingPowerCall")', function() {
        // TODO: update the code to test the property dayTradingBuyingPowerCall
        expect(instance).to.have.property('dayTradingBuyingPowerCall');
        // expect(instance.dayTradingBuyingPowerCall).to.be(expectedValueLiteral);
      });

      it('should have the property dayTradingEquityCall (base name: "dayTradingEquityCall")', function() {
        // TODO: update the code to test the property dayTradingEquityCall
        expect(instance).to.have.property('dayTradingEquityCall');
        // expect(instance.dayTradingEquityCall).to.be(expectedValueLiteral);
      });

      it('should have the property equity (base name: "equity")', function() {
        // TODO: update the code to test the property equity
        expect(instance).to.have.property('equity');
        // expect(instance.equity).to.be(expectedValueLiteral);
      });

      it('should have the property equityPercentage (base name: "equityPercentage")', function() {
        // TODO: update the code to test the property equityPercentage
        expect(instance).to.have.property('equityPercentage');
        // expect(instance.equityPercentage).to.be(expectedValueLiteral);
      });

      it('should have the property isInCall (base name: "isInCall")', function() {
        // TODO: update the code to test the property isInCall
        expect(instance).to.have.property('isInCall');
        // expect(instance.isInCall).to.be(expectedValueLiteral);
      });

      it('should have the property liquidationValue (base name: "liquidationValue")', function() {
        // TODO: update the code to test the property liquidationValue
        expect(instance).to.have.property('liquidationValue');
        // expect(instance.liquidationValue).to.be(expectedValueLiteral);
      });

      it('should have the property longMarginValue (base name: "longMarginValue")', function() {
        // TODO: update the code to test the property longMarginValue
        expect(instance).to.have.property('longMarginValue');
        // expect(instance.longMarginValue).to.be(expectedValueLiteral);
      });

      it('should have the property longOptionMarketValue (base name: "longOptionMarketValue")', function() {
        // TODO: update the code to test the property longOptionMarketValue
        expect(instance).to.have.property('longOptionMarketValue');
        // expect(instance.longOptionMarketValue).to.be(expectedValueLiteral);
      });

      it('should have the property longStockValue (base name: "longStockValue")', function() {
        // TODO: update the code to test the property longStockValue
        expect(instance).to.have.property('longStockValue');
        // expect(instance.longStockValue).to.be(expectedValueLiteral);
      });

      it('should have the property maintenanceCall (base name: "maintenanceCall")', function() {
        // TODO: update the code to test the property maintenanceCall
        expect(instance).to.have.property('maintenanceCall');
        // expect(instance.maintenanceCall).to.be(expectedValueLiteral);
      });

      it('should have the property maintenanceRequirement (base name: "maintenanceRequirement")', function() {
        // TODO: update the code to test the property maintenanceRequirement
        expect(instance).to.have.property('maintenanceRequirement');
        // expect(instance.maintenanceRequirement).to.be(expectedValueLiteral);
      });

      it('should have the property margin (base name: "margin")', function() {
        // TODO: update the code to test the property margin
        expect(instance).to.have.property('margin');
        // expect(instance.margin).to.be(expectedValueLiteral);
      });

      it('should have the property marginBalance (base name: "marginBalance")', function() {
        // TODO: update the code to test the property marginBalance
        expect(instance).to.have.property('marginBalance');
        // expect(instance.marginBalance).to.be(expectedValueLiteral);
      });

      it('should have the property marginEquity (base name: "marginEquity")', function() {
        // TODO: update the code to test the property marginEquity
        expect(instance).to.have.property('marginEquity');
        // expect(instance.marginEquity).to.be(expectedValueLiteral);
      });

      it('should have the property moneyMarketFund (base name: "moneyMarketFund")', function() {
        // TODO: update the code to test the property moneyMarketFund
        expect(instance).to.have.property('moneyMarketFund');
        // expect(instance.moneyMarketFund).to.be(expectedValueLiteral);
      });

      it('should have the property mutualFundValue (base name: "mutualFundValue")', function() {
        // TODO: update the code to test the property mutualFundValue
        expect(instance).to.have.property('mutualFundValue');
        // expect(instance.mutualFundValue).to.be(expectedValueLiteral);
      });

      it('should have the property pendingDeposits (base name: "pendingDeposits")', function() {
        // TODO: update the code to test the property pendingDeposits
        expect(instance).to.have.property('pendingDeposits');
        // expect(instance.pendingDeposits).to.be(expectedValueLiteral);
      });

      it('should have the property regTCall (base name: "regTCall")', function() {
        // TODO: update the code to test the property regTCall
        expect(instance).to.have.property('regTCall');
        // expect(instance.regTCall).to.be(expectedValueLiteral);
      });

      it('should have the property shortBalance (base name: "shortBalance")', function() {
        // TODO: update the code to test the property shortBalance
        expect(instance).to.have.property('shortBalance');
        // expect(instance.shortBalance).to.be(expectedValueLiteral);
      });

      it('should have the property shortMarginValue (base name: "shortMarginValue")', function() {
        // TODO: update the code to test the property shortMarginValue
        expect(instance).to.have.property('shortMarginValue');
        // expect(instance.shortMarginValue).to.be(expectedValueLiteral);
      });

      it('should have the property shortOptionMarketValue (base name: "shortOptionMarketValue")', function() {
        // TODO: update the code to test the property shortOptionMarketValue
        expect(instance).to.have.property('shortOptionMarketValue');
        // expect(instance.shortOptionMarketValue).to.be(expectedValueLiteral);
      });

      it('should have the property shortStockValue (base name: "shortStockValue")', function() {
        // TODO: update the code to test the property shortStockValue
        expect(instance).to.have.property('shortStockValue');
        // expect(instance.shortStockValue).to.be(expectedValueLiteral);
      });

      it('should have the property totalCash (base name: "totalCash")', function() {
        // TODO: update the code to test the property totalCash
        expect(instance).to.have.property('totalCash');
        // expect(instance.totalCash).to.be(expectedValueLiteral);
      });

      it('should have the property unsettledCash (base name: "unsettledCash")', function() {
        // TODO: update the code to test the property unsettledCash
        expect(instance).to.have.property('unsettledCash');
        // expect(instance.unsettledCash).to.be(expectedValueLiteral);
      });

    });
  });

}));
