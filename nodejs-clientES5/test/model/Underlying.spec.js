/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Underlying', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.Underlying();
      });

      it('should create an instance of Underlying', function() {
        // TODO: update the code to test Underlying
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.Underlying);
      });

      it('should have the property ask (base name: "ask")', function() {
        // TODO: update the code to test the property ask
        expect(instance).to.have.property('ask');
        // expect(instance.ask).to.be(expectedValueLiteral);
      });

      it('should have the property askSize (base name: "askSize")', function() {
        // TODO: update the code to test the property askSize
        expect(instance).to.have.property('askSize');
        // expect(instance.askSize).to.be(expectedValueLiteral);
      });

      it('should have the property bid (base name: "bid")', function() {
        // TODO: update the code to test the property bid
        expect(instance).to.have.property('bid');
        // expect(instance.bid).to.be(expectedValueLiteral);
      });

      it('should have the property bidSize (base name: "bidSize")', function() {
        // TODO: update the code to test the property bidSize
        expect(instance).to.have.property('bidSize');
        // expect(instance.bidSize).to.be(expectedValueLiteral);
      });

      it('should have the property change (base name: "change")', function() {
        // TODO: update the code to test the property change
        expect(instance).to.have.property('change');
        // expect(instance.change).to.be(expectedValueLiteral);
      });

      it('should have the property close (base name: "close")', function() {
        // TODO: update the code to test the property close
        expect(instance).to.have.property('close');
        // expect(instance.close).to.be(expectedValueLiteral);
      });

      it('should have the property delayed (base name: "delayed")', function() {
        // TODO: update the code to test the property delayed
        expect(instance).to.have.property('delayed');
        // expect(instance.delayed).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property exchangeName (base name: "exchangeName")', function() {
        // TODO: update the code to test the property exchangeName
        expect(instance).to.have.property('exchangeName');
        // expect(instance.exchangeName).to.be(expectedValueLiteral);
      });

      it('should have the property fiftyTwoWeekHigh (base name: "fiftyTwoWeekHigh")', function() {
        // TODO: update the code to test the property fiftyTwoWeekHigh
        expect(instance).to.have.property('fiftyTwoWeekHigh');
        // expect(instance.fiftyTwoWeekHigh).to.be(expectedValueLiteral);
      });

      it('should have the property fiftyTwoWeekLow (base name: "fiftyTwoWeekLow")', function() {
        // TODO: update the code to test the property fiftyTwoWeekLow
        expect(instance).to.have.property('fiftyTwoWeekLow');
        // expect(instance.fiftyTwoWeekLow).to.be(expectedValueLiteral);
      });

      it('should have the property highePrice (base name: "highePrice")', function() {
        // TODO: update the code to test the property highePrice
        expect(instance).to.have.property('highePrice');
        // expect(instance.highePrice).to.be(expectedValueLiteral);
      });

      it('should have the property last (base name: "last")', function() {
        // TODO: update the code to test the property last
        expect(instance).to.have.property('last');
        // expect(instance.last).to.be(expectedValueLiteral);
      });

      it('should have the property lowPrice (base name: "lowPrice")', function() {
        // TODO: update the code to test the property lowPrice
        expect(instance).to.have.property('lowPrice');
        // expect(instance.lowPrice).to.be(expectedValueLiteral);
      });

      it('should have the property makrPercentChange (base name: "makrPercentChange")', function() {
        // TODO: update the code to test the property makrPercentChange
        expect(instance).to.have.property('makrPercentChange');
        // expect(instance.makrPercentChange).to.be(expectedValueLiteral);
      });

      it('should have the property mark (base name: "mark")', function() {
        // TODO: update the code to test the property mark
        expect(instance).to.have.property('mark');
        // expect(instance.mark).to.be(expectedValueLiteral);
      });

      it('should have the property markChange (base name: "markChange")', function() {
        // TODO: update the code to test the property markChange
        expect(instance).to.have.property('markChange');
        // expect(instance.markChange).to.be(expectedValueLiteral);
      });

      it('should have the property openPrice (base name: "openPrice")', function() {
        // TODO: update the code to test the property openPrice
        expect(instance).to.have.property('openPrice');
        // expect(instance.openPrice).to.be(expectedValueLiteral);
      });

      it('should have the property percentChange (base name: "percentChange")', function() {
        // TODO: update the code to test the property percentChange
        expect(instance).to.have.property('percentChange');
        // expect(instance.percentChange).to.be(expectedValueLiteral);
      });

      it('should have the property quoteTime (base name: "quoteTime")', function() {
        // TODO: update the code to test the property quoteTime
        expect(instance).to.have.property('quoteTime');
        // expect(instance.quoteTime).to.be(expectedValueLiteral);
      });

      it('should have the property symbol (base name: "symbol")', function() {
        // TODO: update the code to test the property symbol
        expect(instance).to.have.property('symbol');
        // expect(instance.symbol).to.be(expectedValueLiteral);
      });

      it('should have the property totalVolume (base name: "totalVolume")', function() {
        // TODO: update the code to test the property totalVolume
        expect(instance).to.have.property('totalVolume');
        // expect(instance.totalVolume).to.be(expectedValueLiteral);
      });

      it('should have the property tradeTime (base name: "tradeTime")', function() {
        // TODO: update the code to test the property tradeTime
        expect(instance).to.have.property('tradeTime');
        // expect(instance.tradeTime).to.be(expectedValueLiteral);
      });

    });
  });

}));
