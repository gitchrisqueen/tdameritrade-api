/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserPrincipal', function() {
      beforeEach(function() {
        instance = new GitChrisQueen_TDA_JS.UserPrincipal();
      });

      it('should create an instance of UserPrincipal', function() {
        // TODO: update the code to test UserPrincipal
        expect(instance).to.be.a(GitChrisQueen_TDA_JS.UserPrincipal);
      });

      it('should have the property accessLevel (base name: "accessLevel")', function() {
        // TODO: update the code to test the property accessLevel
        expect(instance).to.have.property('accessLevel');
        // expect(instance.accessLevel).to.be(expectedValueLiteral);
      });

      it('should have the property accounts (base name: "accounts")', function() {
        // TODO: update the code to test the property accounts
        expect(instance).to.have.property('accounts');
        // expect(instance.accounts).to.be(expectedValueLiteral);
      });

      it('should have the property authToken (base name: "authToken")', function() {
        // TODO: update the code to test the property authToken
        expect(instance).to.have.property('authToken');
        // expect(instance.authToken).to.be(expectedValueLiteral);
      });

      it('should have the property lastLoginTime (base name: "lastLoginTime")', function() {
        // TODO: update the code to test the property lastLoginTime
        expect(instance).to.have.property('lastLoginTime');
        // expect(instance.lastLoginTime).to.be(expectedValueLiteral);
      });

      it('should have the property loginTime (base name: "loginTime")', function() {
        // TODO: update the code to test the property loginTime
        expect(instance).to.have.property('loginTime');
        // expect(instance.loginTime).to.be(expectedValueLiteral);
      });

      it('should have the property primaryAccountId (base name: "primaryAccountId")', function() {
        // TODO: update the code to test the property primaryAccountId
        expect(instance).to.have.property('primaryAccountId');
        // expect(instance.primaryAccountId).to.be(expectedValueLiteral);
      });

      it('should have the property professionalStatus (base name: "professionalStatus")', function() {
        // TODO: update the code to test the property professionalStatus
        expect(instance).to.have.property('professionalStatus');
        // expect(instance.professionalStatus).to.be(expectedValueLiteral);
      });

      it('should have the property quotes (base name: "quotes")', function() {
        // TODO: update the code to test the property quotes
        expect(instance).to.have.property('quotes');
        // expect(instance.quotes).to.be(expectedValueLiteral);
      });

      it('should have the property stalePassword (base name: "stalePassword")', function() {
        // TODO: update the code to test the property stalePassword
        expect(instance).to.have.property('stalePassword');
        // expect(instance.stalePassword).to.be(expectedValueLiteral);
      });

      it('should have the property streamerInfo (base name: "streamerInfo")', function() {
        // TODO: update the code to test the property streamerInfo
        expect(instance).to.have.property('streamerInfo');
        // expect(instance.streamerInfo).to.be(expectedValueLiteral);
      });

      it('should have the property streamerSubscriptionKeys (base name: "streamerSubscriptionKeys")', function() {
        // TODO: update the code to test the property streamerSubscriptionKeys
        expect(instance).to.have.property('streamerSubscriptionKeys');
        // expect(instance.streamerSubscriptionKeys).to.be(expectedValueLiteral);
      });

      it('should have the property tokenExpirationTime (base name: "tokenExpirationTime")', function() {
        // TODO: update the code to test the property tokenExpirationTime
        expect(instance).to.have.property('tokenExpirationTime');
        // expect(instance.tokenExpirationTime).to.be(expectedValueLiteral);
      });

      it('should have the property userCdDomainId (base name: "userCdDomainId")', function() {
        // TODO: update the code to test the property userCdDomainId
        expect(instance).to.have.property('userCdDomainId');
        // expect(instance.userCdDomainId).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

    });
  });

}));
