/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitChrisQueen_TDA_JS.TransactionsApi();
  });

  describe('(package)', function() {
    describe('TransactionsApi', function() {
      describe('accountsAccountIdTransactionsGET', function() {
        it('should call accountsAccountIdTransactionsGET successfully', function(done) {
          // TODO: uncomment, update parameter values for accountsAccountIdTransactionsGET call and complete the assertions
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.type = "type_example";
          opts.symbol = "symbol_example";
          opts.startDate = "startDate_example";
          opts.endDate = "endDate_example";

          instance.accountsAccountIdTransactionsGET(accountId, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GitChrisQueen_TDA_JS.Transaction);
            expect(data.accruedInterest).to.be.a('number');
            expect(data.accruedInterest).to.be(0.0);
            expect(data.achStatus).to.be.a('string');
            expect(data.achStatus).to.be("Approved");
            expect(data.cashBalanceEffectFlag).to.be.a('boolean');
            expect(data.cashBalanceEffectFlag).to.be(false);
            expect(data.clearingReferenceNumber).to.be.a('string');
            expect(data.clearingReferenceNumber).to.be("");
            expect(data.dayTradeBuyingPowerEffect).to.be.a('number');
            expect(data.dayTradeBuyingPowerEffect).to.be(0.0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.fees;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0.0);
              }
            }
            expect(data.netAmount).to.be.a('number');
            expect(data.netAmount).to.be(0.0);
            expect(data.orderDate).to.be.a(Date);
            expect(data.orderDate).to.be(new Date());
            expect(data.orderId).to.be.a('string');
            expect(data.orderId).to.be("");
            expect(data.requirementReallocationAmount).to.be.a('number');
            expect(data.requirementReallocationAmount).to.be(0.0);
            expect(data.settlementDate).to.be.a(Date);
            expect(data.settlementDate).to.be(new Date());
            expect(data.sma).to.be.a('number');
            expect(data.sma).to.be(0.0);
            expect(data.subAccount).to.be.a('string');
            expect(data.subAccount).to.be("");
            expect(data.transactionDate).to.be.a(Date);
            expect(data.transactionDate).to.be(new Date());
            expect(data.transactionId).to.be.a('number');
            expect(data.transactionId).to.be("0");
            expect(data.transactionItem).to.be.a(GitChrisQueen_TDA_JS.TransactionTransactionItem);
                  expect(data.transactionItem.accountId).to.be.a('number');
              expect(data.transactionItem.accountId).to.be(0);
              expect(data.transactionItem.amount).to.be.a('number');
              expect(data.transactionItem.amount).to.be(0.0);
              expect(data.transactionItem.cost).to.be.a('number');
              expect(data.transactionItem.cost).to.be(0.0);
              expect(data.transactionItem.instruction).to.be.a('string');
              expect(data.transactionItem.instruction).to.be("BUY");
              expect(data.transactionItem.instrument).to.be.a(GitChrisQueen_TDA_JS.TransactionTransactionItemInstrument);
                    expect(data.transactionItem.instrument.assetType).to.be.a('string');
                expect(data.transactionItem.instrument.assetType).to.be("EQUITY");
                expect(data.transactionItem.instrument.bondInterestRate).to.be.a('number');
                expect(data.transactionItem.instrument.bondInterestRate).to.be(0.0);
                expect(data.transactionItem.instrument.bondMaturityDate).to.be.a(Date);
                expect(data.transactionItem.instrument.bondMaturityDate).to.be(new Date());
                expect(data.transactionItem.instrument.cusip).to.be.a('string');
                expect(data.transactionItem.instrument.cusip).to.be("");
                expect(data.transactionItem.instrument.description).to.be.a('string');
                expect(data.transactionItem.instrument.description).to.be("");
                expect(data.transactionItem.instrument.optionExpirationDate).to.be.a(Date);
                expect(data.transactionItem.instrument.optionExpirationDate).to.be(new Date());
                expect(data.transactionItem.instrument.optionStrikePrice).to.be.a('number');
                expect(data.transactionItem.instrument.optionStrikePrice).to.be(0.0);
                expect(data.transactionItem.instrument.putCall).to.be.a('string');
                expect(data.transactionItem.instrument.putCall).to.be("PUT");
                expect(data.transactionItem.instrument.symbol).to.be.a('string');
                expect(data.transactionItem.instrument.symbol).to.be("");
                expect(data.transactionItem.instrument.underlyingSymbol).to.be.a('string');
                expect(data.transactionItem.instrument.underlyingSymbol).to.be("");
              expect(data.transactionItem.parentChildIndicator).to.be.a('string');
              expect(data.transactionItem.parentChildIndicator).to.be("");
              expect(data.transactionItem.parentOrderKey).to.be.a('number');
              expect(data.transactionItem.parentOrderKey).to.be(0);
              expect(data.transactionItem.positionEffect).to.be.a('string');
              expect(data.transactionItem.positionEffect).to.be("OPENING");
              expect(data.transactionItem.price).to.be.a('number');
              expect(data.transactionItem.price).to.be(0.0);
            expect(data.transactionSubType).to.be.a('string');
            expect(data.transactionSubType).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("TRADE");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountsAccountIdTransactionsTransactionIdGET', function() {
        it('should call accountsAccountIdTransactionsTransactionIdGET successfully', function(done) {
          // TODO: uncomment, update parameter values for accountsAccountIdTransactionsTransactionIdGET call and complete the assertions
          /*
          var accountId = "accountId_example";
          var transactionId = "transactionId_example";

          instance.accountsAccountIdTransactionsTransactionIdGET(accountId, transactionId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GitChrisQueen_TDA_JS.Transaction);
            expect(data.accruedInterest).to.be.a('number');
            expect(data.accruedInterest).to.be(0.0);
            expect(data.achStatus).to.be.a('string');
            expect(data.achStatus).to.be("Approved");
            expect(data.cashBalanceEffectFlag).to.be.a('boolean');
            expect(data.cashBalanceEffectFlag).to.be(false);
            expect(data.clearingReferenceNumber).to.be.a('string');
            expect(data.clearingReferenceNumber).to.be("");
            expect(data.dayTradeBuyingPowerEffect).to.be.a('number');
            expect(data.dayTradeBuyingPowerEffect).to.be(0.0);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.fees;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0.0);
              }
            }
            expect(data.netAmount).to.be.a('number');
            expect(data.netAmount).to.be(0.0);
            expect(data.orderDate).to.be.a(Date);
            expect(data.orderDate).to.be(new Date());
            expect(data.orderId).to.be.a('string');
            expect(data.orderId).to.be("");
            expect(data.requirementReallocationAmount).to.be.a('number');
            expect(data.requirementReallocationAmount).to.be(0.0);
            expect(data.settlementDate).to.be.a(Date);
            expect(data.settlementDate).to.be(new Date());
            expect(data.sma).to.be.a('number');
            expect(data.sma).to.be(0.0);
            expect(data.subAccount).to.be.a('string');
            expect(data.subAccount).to.be("");
            expect(data.transactionDate).to.be.a(Date);
            expect(data.transactionDate).to.be(new Date());
            expect(data.transactionId).to.be.a('number');
            expect(data.transactionId).to.be("0");
            expect(data.transactionItem).to.be.a(GitChrisQueen_TDA_JS.TransactionTransactionItem);
                  expect(data.transactionItem.accountId).to.be.a('number');
              expect(data.transactionItem.accountId).to.be(0);
              expect(data.transactionItem.amount).to.be.a('number');
              expect(data.transactionItem.amount).to.be(0.0);
              expect(data.transactionItem.cost).to.be.a('number');
              expect(data.transactionItem.cost).to.be(0.0);
              expect(data.transactionItem.instruction).to.be.a('string');
              expect(data.transactionItem.instruction).to.be("BUY");
              expect(data.transactionItem.instrument).to.be.a(GitChrisQueen_TDA_JS.TransactionTransactionItemInstrument);
                    expect(data.transactionItem.instrument.assetType).to.be.a('string');
                expect(data.transactionItem.instrument.assetType).to.be("EQUITY");
                expect(data.transactionItem.instrument.bondInterestRate).to.be.a('number');
                expect(data.transactionItem.instrument.bondInterestRate).to.be(0.0);
                expect(data.transactionItem.instrument.bondMaturityDate).to.be.a(Date);
                expect(data.transactionItem.instrument.bondMaturityDate).to.be(new Date());
                expect(data.transactionItem.instrument.cusip).to.be.a('string');
                expect(data.transactionItem.instrument.cusip).to.be("");
                expect(data.transactionItem.instrument.description).to.be.a('string');
                expect(data.transactionItem.instrument.description).to.be("");
                expect(data.transactionItem.instrument.optionExpirationDate).to.be.a(Date);
                expect(data.transactionItem.instrument.optionExpirationDate).to.be(new Date());
                expect(data.transactionItem.instrument.optionStrikePrice).to.be.a('number');
                expect(data.transactionItem.instrument.optionStrikePrice).to.be(0.0);
                expect(data.transactionItem.instrument.putCall).to.be.a('string');
                expect(data.transactionItem.instrument.putCall).to.be("PUT");
                expect(data.transactionItem.instrument.symbol).to.be.a('string');
                expect(data.transactionItem.instrument.symbol).to.be("");
                expect(data.transactionItem.instrument.underlyingSymbol).to.be.a('string');
                expect(data.transactionItem.instrument.underlyingSymbol).to.be("");
              expect(data.transactionItem.parentChildIndicator).to.be.a('string');
              expect(data.transactionItem.parentChildIndicator).to.be("");
              expect(data.transactionItem.parentOrderKey).to.be.a('number');
              expect(data.transactionItem.parentOrderKey).to.be(0);
              expect(data.transactionItem.positionEffect).to.be.a('string');
              expect(data.transactionItem.positionEffect).to.be("OPENING");
              expect(data.transactionItem.price).to.be.a('number');
              expect(data.transactionItem.price).to.be(0.0);
            expect(data.transactionSubType).to.be.a('string');
            expect(data.transactionSubType).to.be("");
            expect(data.type).to.be.a('string');
            expect(data.type).to.be("TRADE");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
