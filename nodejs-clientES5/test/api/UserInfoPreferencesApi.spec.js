/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitChrisQueen_TDA_JS.UserInfoPreferencesApi();
  });

  describe('(package)', function() {
    describe('UserInfoPreferencesApi', function() {
      describe('accountsAccountIdPreferencesGET', function() {
        it('should call accountsAccountIdPreferencesGET successfully', function(done) {
          // TODO: uncomment, update parameter values for accountsAccountIdPreferencesGET call and complete the assertions
          /*
          var accountId = "accountId_example";

          instance.accountsAccountIdPreferencesGET(accountId).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GitChrisQueen_TDA_JS.Preferences);
            expect(data.authTokenTimeout).to.be.a('string');
            expect(data.authTokenTimeout).to.be("FIFTY_FIVE_MINUTES");
            expect(data.defaultAdvancedToolLaunch).to.be.a('string');
            expect(data.defaultAdvancedToolLaunch).to.be("TA");
            expect(data.defaultEquityOrderDuration).to.be.a('string');
            expect(data.defaultEquityOrderDuration).to.be("DAY");
            expect(data.defaultEquityOrderLegInstruction).to.be.a('string');
            expect(data.defaultEquityOrderLegInstruction).to.be("BUY");
            expect(data.defaultEquityOrderMarketSession).to.be.a('string');
            expect(data.defaultEquityOrderMarketSession).to.be("AM");
            expect(data.defaultEquityOrderPriceLinkType).to.be.a('string');
            expect(data.defaultEquityOrderPriceLinkType).to.be("VALUE");
            expect(data.defaultEquityOrderType).to.be.a('string');
            expect(data.defaultEquityOrderType).to.be("MARKET");
            expect(data.defaultEquityQuantity).to.be.a('number');
            expect(data.defaultEquityQuantity).to.be(0);
            expect(data.directEquityRouting).to.be.a('boolean');
            expect(data.directEquityRouting).to.be(false);
            expect(data.directOptionsRouting).to.be.a('boolean');
            expect(data.directOptionsRouting).to.be(false);
            expect(data.equityTaxLotMethod).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod);
                  expect(data.equityTaxLotMethod.schema).to.be.a(GitChrisQueen_TDA_JS.LotMethod);
      
            expect(data.expressTrading).to.be.a('boolean');
            expect(data.expressTrading).to.be(false);
            expect(data.mutualFundTaxLotMethod).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod);
                  expect(data.mutualFundTaxLotMethod.schema).to.be.a(GitChrisQueen_TDA_JS.LotMethod);
      
            expect(data.optionTaxLotMethod).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod);
                  expect(data.optionTaxLotMethod.schema).to.be.a(GitChrisQueen_TDA_JS.LotMethod);
      

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('accountsAccountIdPreferencesPUT', function() {
        it('should call accountsAccountIdPreferencesPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for accountsAccountIdPreferencesPUT call
          /*
          var accountId = "accountId_example";
          var opts = {};
          opts.body = new GitChrisQueen_TDA_JS.Preferences();
          opts.body.authTokenTimeout = "FIFTY_FIVE_MINUTES";
          opts.body.defaultAdvancedToolLaunch = "TA";
          opts.body.defaultEquityOrderDuration = "DAY";
          opts.body.defaultEquityOrderLegInstruction = "BUY";
          opts.body.defaultEquityOrderMarketSession = "AM";
          opts.body.defaultEquityOrderPriceLinkType = "VALUE";
          opts.body.defaultEquityOrderType = "MARKET";
          opts.body.defaultEquityQuantity = 0;
          opts.body.directEquityRouting = false;
          opts.body.directOptionsRouting = false;
          opts.body.equityTaxLotMethod = new GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod();
          opts.body.equityTaxLotMethod.schema = new GitChrisQueen_TDA_JS.LotMethod();
          opts.body.expressTrading = false;
          opts.body.mutualFundTaxLotMethod = new GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod();
          opts.body.mutualFundTaxLotMethod.schema = new GitChrisQueen_TDA_JS.LotMethod();
          opts.body.optionTaxLotMethod = new GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod();
          opts.body.optionTaxLotMethod.schema = new GitChrisQueen_TDA_JS.LotMethod();

          instance.accountsAccountIdPreferencesPUT(accountId, opts).then(function(data) {

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userprincipalsGET', function() {
        it('should call userprincipalsGET successfully', function(done) {
          // TODO: uncomment, update parameter values for userprincipalsGET call and complete the assertions
          /*
          var opts = {};
          opts.fields = "fields_example";

          instance.userprincipalsGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GitChrisQueen_TDA_JS.UserPrincipal);
            expect(data.accessLevel).to.be.a('string');
            expect(data.accessLevel).to.be("");
            {
              let dataCtr = data.accounts;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalAccounts);
                expect(data.accountCdDomainId).to.be.a('string');
                expect(data.accountCdDomainId).to.be("");
                expect(data.accountId).to.be.a('string');
                expect(data.accountId).to.be("");
                expect(data.acl).to.be.a('string');
                expect(data.acl).to.be("");
                expect(data.authorizations).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalAuthorizations);
                      expect(data.authorizations.advancedMargin).to.be.a('boolean');
                  expect(data.authorizations.advancedMargin).to.be(false);
                  expect(data.authorizations.apex).to.be.a('boolean');
                  expect(data.authorizations.apex).to.be(false);
                  expect(data.authorizations.levelTwoQuotes).to.be.a('boolean');
                  expect(data.authorizations.levelTwoQuotes).to.be(false);
                  expect(data.authorizations.marginTrading).to.be.a('boolean');
                  expect(data.authorizations.marginTrading).to.be(false);
                  expect(data.authorizations.optionTradingLevel).to.be.a('string');
                  expect(data.authorizations.optionTradingLevel).to.be("COVERED");
                  expect(data.authorizations.scottradeAccount).to.be.a('boolean');
                  expect(data.authorizations.scottradeAccount).to.be(false);
                  expect(data.authorizations.stockTrading).to.be.a('boolean');
                  expect(data.authorizations.stockTrading).to.be(false);
                  expect(data.authorizations.streamerAccess).to.be.a('boolean');
                  expect(data.authorizations.streamerAccess).to.be(false);
                  expect(data.authorizations.streamingNews).to.be.a('boolean');
                  expect(data.authorizations.streamingNews).to.be(false);
                expect(data.company).to.be.a('string');
                expect(data.company).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.displayName).to.be.a('string');
                expect(data.displayName).to.be("");
                expect(data.preferences).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferences);
                      expect(data.preferences.authTokenTimeout).to.be.a('string');
                  expect(data.preferences.authTokenTimeout).to.be("FIFTY_FIVE_MINUTES");
                  expect(data.preferences.defaultAdvancedToolLaunch).to.be.a('string');
                  expect(data.preferences.defaultAdvancedToolLaunch).to.be("TA");
                  expect(data.preferences.defaultEquityOrderDuration).to.be.a('string');
                  expect(data.preferences.defaultEquityOrderDuration).to.be("DAY");
                  expect(data.preferences.defaultEquityOrderLegInstruction).to.be.a('string');
                  expect(data.preferences.defaultEquityOrderLegInstruction).to.be("BUY");
                  expect(data.preferences.defaultEquityOrderMarketSession).to.be.a('string');
                  expect(data.preferences.defaultEquityOrderMarketSession).to.be("AM");
                  expect(data.preferences.defaultEquityOrderPriceLinkType).to.be.a('string');
                  expect(data.preferences.defaultEquityOrderPriceLinkType).to.be("VALUE");
                  expect(data.preferences.defaultEquityOrderType).to.be.a('string');
                  expect(data.preferences.defaultEquityOrderType).to.be("MARKET");
                  expect(data.preferences.defaultEquityQuantity).to.be.a('number');
                  expect(data.preferences.defaultEquityQuantity).to.be(0);
                  expect(data.preferences.directEquityRouting).to.be.a('boolean');
                  expect(data.preferences.directEquityRouting).to.be(false);
                  expect(data.preferences.directOptionsRouting).to.be.a('boolean');
                  expect(data.preferences.directOptionsRouting).to.be(false);
                  expect(data.preferences.equityTaxLotMethod).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod);
                        expect(data.preferences.equityTaxLotMethod.schema).to.be.a(GitChrisQueen_TDA_JS.LotMethod);
            
                  expect(data.preferences.expressTrading).to.be.a('boolean');
                  expect(data.preferences.expressTrading).to.be(false);
                  expect(data.preferences.mutualFundTaxLotMethod).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod);
                        expect(data.preferences.mutualFundTaxLotMethod.schema).to.be.a(GitChrisQueen_TDA_JS.LotMethod);
            
                  expect(data.preferences.optionTaxLotMethod).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalPreferencesMutualFundTaxLotMethod);
                        expect(data.preferences.optionTaxLotMethod.schema).to.be.a(GitChrisQueen_TDA_JS.LotMethod);
            
                expect(data.segment).to.be.a('string');
                expect(data.segment).to.be("");
                {
                  let dataCtr = data.surrogateIds;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.authToken).to.be.a('string');
            expect(data.authToken).to.be("");
            expect(data.lastLoginTime).to.be.a(Date);
            expect(data.lastLoginTime).to.be(new Date());
            expect(data.loginTime).to.be.a(Date);
            expect(data.loginTime).to.be(new Date());
            expect(data.primaryAccountId).to.be.a('string');
            expect(data.primaryAccountId).to.be("");
            expect(data.professionalStatus).to.be.a('string');
            expect(data.professionalStatus).to.be("PROFESSIONAL");
            expect(data.quotes).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalQuotes);
                  expect(data.quotes.isAmexDelayed).to.be.a('boolean');
              expect(data.quotes.isAmexDelayed).to.be(false);
              expect(data.quotes.isCmeDelayed).to.be.a('boolean');
              expect(data.quotes.isCmeDelayed).to.be(false);
              expect(data.quotes.isForexDelayed).to.be.a('boolean');
              expect(data.quotes.isForexDelayed).to.be(false);
              expect(data.quotes.isIceDelayed).to.be.a('boolean');
              expect(data.quotes.isIceDelayed).to.be(false);
              expect(data.quotes.isNasdaqDelayed).to.be.a('boolean');
              expect(data.quotes.isNasdaqDelayed).to.be(false);
              expect(data.quotes.isNyseDelayed).to.be.a('boolean');
              expect(data.quotes.isNyseDelayed).to.be(false);
              expect(data.quotes.isOpraDelayed).to.be.a('boolean');
              expect(data.quotes.isOpraDelayed).to.be(false);
            expect(data.stalePassword).to.be.a('boolean');
            expect(data.stalePassword).to.be(false);
            expect(data.streamerInfo).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalStreamerInfo);
                  expect(data.streamerInfo.accessLevel).to.be.a('string');
              expect(data.streamerInfo.accessLevel).to.be("");
              expect(data.streamerInfo.acl).to.be.a('string');
              expect(data.streamerInfo.acl).to.be("");
              expect(data.streamerInfo.appId).to.be.a('string');
              expect(data.streamerInfo.appId).to.be("");
              expect(data.streamerInfo.streamerBinaryUrl).to.be.a('string');
              expect(data.streamerInfo.streamerBinaryUrl).to.be("");
              expect(data.streamerInfo.streamerSocketUrl).to.be.a('string');
              expect(data.streamerInfo.streamerSocketUrl).to.be("");
              expect(data.streamerInfo.token).to.be.a('string');
              expect(data.streamerInfo.token).to.be("");
              expect(data.streamerInfo.tokenTimestamp).to.be.a(Date);
              expect(data.streamerInfo.tokenTimestamp).to.be(new Date());
              expect(data.streamerInfo.userGroup).to.be.a('string');
              expect(data.streamerInfo.userGroup).to.be("");
            expect(data.streamerSubscriptionKeys).to.be.a(GitChrisQueen_TDA_JS.UserPrincipalStreamerSubscriptionKeys);
                  expect(data.streamerSubscriptionKeys.schema).to.be.a(GitChrisQueen_TDA_JS.SubscriptionKey);
                    {
                  let dataCtr = data.streamerSubscriptionKeys.schema.keys;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(GitChrisQueen_TDA_JS.SubscriptionKeyKeys);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
    
                          }
                }
            expect(data.tokenExpirationTime).to.be.a(Date);
            expect(data.tokenExpirationTime).to.be(new Date());
            expect(data.userCdDomainId).to.be.a('string');
            expect(data.userCdDomainId).to.be("");
            expect(data.userId).to.be.a('string');
            expect(data.userId).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userprincipalsStreamersubscriptionkeysGET', function() {
        it('should call userprincipalsStreamersubscriptionkeysGET successfully', function(done) {
          // TODO: uncomment, update parameter values for userprincipalsStreamersubscriptionkeysGET call and complete the assertions
          /*
          var opts = {};
          opts.accountIds = "accountIds_example";

          instance.userprincipalsStreamersubscriptionkeysGET(opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GitChrisQueen_TDA_JS.SubscriptionKey);
            {
              let dataCtr = data.keys;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GitChrisQueen_TDA_JS.SubscriptionKeyKeys);
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("");

                      }
            }

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
