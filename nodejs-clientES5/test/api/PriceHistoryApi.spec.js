/*
 * TD Ameritrade API - OAuth2
 * This is replication of the TD Ameritrade API.
 *
 * OpenAPI spec version: 0.1.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.14
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.GitChrisQueen_TDA_JS);
  }
}(this, function(expect, GitChrisQueen_TDA_JS) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new GitChrisQueen_TDA_JS.PriceHistoryApi();
  });

  describe('(package)', function() {
    describe('PriceHistoryApi', function() {
      describe('marketdataSymbolPricehistoryGET', function() {
        it('should call marketdataSymbolPricehistoryGET successfully', function(done) {
          // TODO: uncomment, update parameter values for marketdataSymbolPricehistoryGET call and complete the assertions
          /*
          var Symbol = "Symbol_example";
          var opts = {};
          opts.Apikey = "Apikey_example";
          opts.PeriodType = "PeriodType_example";
          opts.Period = 56;
          opts.FrequencyType = "FrequencyType_example";
          opts.Frequency = 56;
          opts.EndDate = 56;
          opts.StartDate = 56;
          opts.NeedExtendedHoursData = true;

          instance.marketdataSymbolPricehistoryGET(Symbol, opts).then(function(data) {
            // TODO: update response assertions
            expect(data).to.be.a(GitChrisQueen_TDA_JS.CandleList);
            {
              let dataCtr = data.Candles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(GitChrisQueen_TDA_JS.CandleListCandles);
                expect(data.Close).to.be.a('number');
                expect(data.Close).to.be(0.0);
                expect(data.Datetime).to.be.a('number');
                expect(data.Datetime).to.be("0");
                expect(data.High).to.be.a('number');
                expect(data.High).to.be(0.0);
                expect(data.Low).to.be.a('number');
                expect(data.Low).to.be(0.0);
                expect(data.Open).to.be.a('number');
                expect(data.Open).to.be(0.0);
                expect(data.Volume).to.be.a('number');
                expect(data.Volume).to.be(0.0);

                      }
            }
            expect(data.Empty).to.be.a('boolean');
            expect(data.Empty).to.be(false);
            expect(data.Symbol).to.be.a('string');
            expect(data.Symbol).to.be("");

            done();
          }, function(error) {
            done(error);
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
